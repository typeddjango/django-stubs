-   case: test_custom_model_fields_with_generic_type
    main: |
        from myapp.models import User, CustomFieldValue
        user = User()
        reveal_type(user.id)  # N: Revealed type is "builtins.int"
        reveal_type(user.my_custom_field1)  # N: Revealed type is "myapp.models.CustomFieldValue"
        reveal_type(user.my_custom_field2)  # N: Revealed type is "myapp.models.CustomFieldValue"
        reveal_type(user.my_custom_field3)  # N: Revealed type is "builtins.bool"
        reveal_type(user.my_custom_field4)  # N: Revealed type is "myapp.models.CustomFieldValue"
        reveal_type(user.my_custom_field5)  # N: Revealed type is "myapp.models.CustomFieldValue"
        reveal_type(user.my_custom_field6)  # N: Revealed type is "myapp.models.CustomFieldValue"
        reveal_type(user.my_custom_field7)  # N: Revealed type is "builtins.bool"
        reveal_type(user.my_custom_field8)  # N: Revealed type is "myapp.models.CustomFieldValue"
        reveal_type(user.my_custom_field9)  # N: Revealed type is "myapp.models.CustomFieldValue"
        reveal_type(user.my_custom_field10)  # N: Revealed type is "builtins.bool"
        reveal_type(user.my_custom_field11)  # N: Revealed type is "builtins.bool"
        reveal_type(user.my_custom_field12)  # N: Revealed type is "Union[myapp.models.CustomFieldValue, None]"
        reveal_type(user.my_custom_field13)  # N: Revealed type is "Union[myapp.models.CustomFieldValue, None]"
        reveal_type(user.my_custom_field14)  # N: Revealed type is "Union[builtins.bool, None]"
        reveal_type(user.my_custom_field15)  # N: Revealed type is "None"

        reveal_type(user.my_custom_field_any1)  # N: Revealed type is "Any"
        reveal_type(user.my_custom_field_any2)  # N: Revealed type is "Any"
        reveal_type(user.my_custom_field_any3)  # N: Revealed type is "Any"
        reveal_type(user.my_custom_field_any4)  # N: Revealed type is "Any"
    monkeypatch: true
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from django.db.models import fields
                from django.db.models.expressions import Combinable

                from typing import Any, Generic, Union
                from typing_extensions import TypeVar

                _ST = TypeVar("_ST", contravariant=True)
                _GT = TypeVar("_GT", covariant=True)

                _ST_IntegerField = TypeVar("_ST_IntegerField", default=Union[float, int, str, Combinable])
                _GT_IntegerField = TypeVar("_GT_IntegerField", default=int)

                T = TypeVar("T")

                class CustomFieldValue: ...

                class GenericField(fields.Field[_ST, _GT]): ...

                class SingleTypeField(fields.Field[T, T]): ...

                class CustomValueField(fields.Field[Union[CustomFieldValue, int], CustomFieldValue]): ...

                class AdditionalTypeVarField(fields.Field[_ST, _GT], Generic[_ST, _GT, T]): ...

                class CustomSmallIntegerField(fields.SmallIntegerField[_ST_IntegerField, _GT_IntegerField]): ...

                class FieldImplicitAny(fields.Field): ...
                class FieldExplicitAny(fields.Field[Any, Any]): ...

                class User(models.Model):
                    id = models.AutoField(primary_key=True)
                    my_custom_field1 = GenericField[Union[CustomFieldValue, int], CustomFieldValue]()
                    my_custom_field2 = CustomValueField()
                    my_custom_field3 = SingleTypeField[bool]()
                    my_custom_field4 = AdditionalTypeVarField[Union[CustomFieldValue, int], CustomFieldValue, bool]()
                    my_custom_field_any1 = FieldImplicitAny()
                    my_custom_field_any2 = FieldExplicitAny()

                    # test null=True on fields with non-optional generic types throw error
                    my_custom_field5 = GenericField[Union[CustomFieldValue, int], CustomFieldValue](null=True)  # E: GenericField is nullable but its generic get type parameter is not optional  [misc]
                    my_custom_field6 = CustomValueField(null=True)  # E: CustomValueField is nullable but its generic get type parameter is not optional  [misc]
                    my_custom_field7 = SingleTypeField[bool](null=True)  # E: SingleTypeField is nullable but its generic get type parameter is not optional  [misc]
                    my_custom_field8 = AdditionalTypeVarField[Union[CustomFieldValue, int], CustomFieldValue, bool](null=True)  # E: AdditionalTypeVarField is nullable but its generic get type parameter is not optional  [misc]
                    my_custom_field9 = fields.Field[Union[CustomFieldValue, int], CustomFieldValue](null=True)  # E: Field is nullable but its generic get type parameter is not optional  [misc]

                    # test overriding fields that set _pyi_private_set_type or _pyi_private_get_type
                    my_custom_field10 = fields.SmallIntegerField[bool, bool]()
                    my_custom_field11 = CustomSmallIntegerField[bool, bool]()

                    # test null=True on fields with non-optional generic types throw no errors
                    my_custom_field12 = fields.Field[Union[CustomFieldValue, int], Union[CustomFieldValue, None]](null=True)
                    my_custom_field13 = GenericField[Union[CustomFieldValue, int], Union[CustomFieldValue, None]](null=True)
                    my_custom_field14 = SingleTypeField[Union[bool, None]](null=True)
                    my_custom_field15 = fields.Field[None, None](null=True)

                    # test null=True on Any does not raise
                    my_custom_field_any3 = FieldImplicitAny(null=True)
                    my_custom_field_any4 = FieldExplicitAny(null=True)
