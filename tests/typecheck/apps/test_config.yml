-   case: test_appconfig_can_be_str
    main: |
      from django.apps.config import AppConfig
      from django.utils.functional import cached_property

      class FooConfig(AppConfig):
          name = "foo"
          default_auto_field = "django.db.models.BigAutoField"

      class BarConfig(AppConfig):
          name = "foo"
          @property
          def default_auto_field(self) -> str: # type: ignore[override]
              return "django.db.models.BigAutoField"

      class BazConfig(AppConfig):
          name = "foo"
          @cached_property
          def default_auto_field(self) -> str: # type: ignore[override]
              return "django.db.models.BigAutoField"

      class FooBarConfig(AppConfig):
          name = "foo"
          default_auto_field = cached_property(lambda self: "django.db.models.BigAutoField")

      reveal_type(FooConfig.default_auto_field)  # N: Revealed type is "builtins.str"
      reveal_type(BarConfig("bar", None).default_auto_field)  # N: Revealed type is "builtins.str"
      reveal_type(BazConfig("baz", None).default_auto_field)  # N: Revealed type is "builtins.str"
      reveal_type(FooBarConfig("baz", None).default_auto_field)  # N: Revealed type is "builtins.str"

-   case: test_get_model
    main: |
        from django.apps import apps
        reveal_type(apps.get_model("app1.First"))
        reveal_type(apps.get_model("app1.first"))
        reveal_type(apps.get_model("app1", "First"))
        reveal_type(apps.get_model(app_label="app1", model_name="First"))
        reveal_type(apps.get_model(app_label="app1", model_name="first"))
        reveal_type(apps.get_model(model_name="First", app_label="app1"))

        reveal_type(apps.get_model("app2.Second"))
        reveal_type(apps.get_model("app2", "Second"))

        reveal_type(apps.get_model("app1.Nonexisting"))
        reveal_type(apps.get_model("app2", "Unknown"))

        reveal_type(apps.get_model("sites.Site"))  # Note that sites is not installed
        reveal_type(apps.get_model("contenttypes.ContentType"))
    out: |
        main:2: note: Revealed type is "Type[app1.models.First]"
        main:3: note: Revealed type is "Type[app1.models.First]"
        main:4: note: Revealed type is "Type[app1.models.First]"
        main:5: note: Revealed type is "Type[app1.models.First]"
        main:6: note: Revealed type is "Type[app1.models.First]"
        main:7: note: Revealed type is "Type[app1.models.First]"
        main:9: note: Revealed type is "Type[app2.models.Second]"
        main:10: note: Revealed type is "Type[app2.models.Second]"
        main:12: note: Revealed type is "Type[django.db.models.base.Model]"
        main:12: error: Could not match lazy reference with any model
        main:13: note: Revealed type is "Type[django.db.models.base.Model]"
        main:13: error: Could not match lazy reference with any model
        main:15: note: Revealed type is "Type[django.db.models.base.Model]"
        main:15: error: Could not match lazy reference with any model
        main:16: note: Revealed type is "Type[django.contrib.contenttypes.models.ContentType]"
    installed_apps:
        - app1
        - app2
    files:
        -   path: app1/__init__.py
        -   path: app1/models.py
            content: |
                from django.db import models

                class First(models.Model):
                    field = models.IntegerField()

        -   path: app2/__init__.py
        -   path: app2/models.py
            content: |
                from django.db import models

                class Second(models.Model):
                    field = models.CharField()
