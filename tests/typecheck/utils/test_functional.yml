-   case: cached_property_class_vs_instance_attributes
    main: |
      from django.utils.functional import cached_property
      from typing import List

      class Foo:
          @cached_property
          def attr(self) -> List[str]: ...
          @cached_property  # E: Argument 1 to "cached_property" has incompatible type "Callable[[Foo, str], List[str]]"; expected "Callable[[Any], List[str]]"  [arg-type]
          def attr2(self, arg2: str) -> List[str]: ...

          reveal_type(attr)      # N: Revealed type is "django.utils.functional.cached_property[builtins.list[builtins.str]]"
          reveal_type(attr.name) # N: Revealed type is "Union[builtins.str, None]"

      reveal_type(Foo.attr)      # N: Revealed type is "django.utils.functional.cached_property[builtins.list[builtins.str]]"
      reveal_type(Foo.attr.func) # N: Revealed type is "def (Any) -> builtins.list[builtins.str]"

      f = Foo()
      reveal_type(f.attr)        # N: Revealed type is "builtins.list[builtins.str]"
      f.attr.name                # E: "List[str]" has no attribute "name"  [attr-defined]

-   case: str_promise_proxy
    main:  |
      from typing import Union

      from django.utils.functional import Promise, lazystr, _StrPromise

      s = lazystr("asd")

      reveal_type(s)                 # N: Revealed type is "django.utils.functional._StrPromise"

      reveal_type(s.format("asd"))   # N: Revealed type is "builtins.str"
      reveal_type(s.capitalize())    # N: Revealed type is "builtins.str"
      reveal_type(s.swapcase)        # N: Revealed type is "def () -> builtins.str"
      reveal_type(s.__getnewargs__)  # N: Revealed type is "def () -> Tuple[builtins.str]"
      s.nonsense                     # E: "_StrPromise" has no attribute "nonsense"  [attr-defined]
      f: Union[_StrPromise, str]
      reveal_type(f.format("asd"))   # N: Revealed type is "builtins.str"
      reveal_type(f + "asd")         # N: Revealed type is "builtins.str"
      reveal_type("asd" + f)         # N: Revealed type is "Union[Any, builtins.str]"

      reveal_type(s + "bar")         # N: Revealed type is "builtins.str"
      reveal_type("foo" + s)         # N: Revealed type is "Any"
      reveal_type(s % "asd")         # N: Revealed type is "builtins.str"

      def foo(content: str) -> None:
        ...

      def bar(content: Promise) -> None:
        ...

      foo(s)                         # E: Argument 1 to "foo" has incompatible type "_StrPromise"; expected "str"  [arg-type]
      bar(s)

-   case: classproperty_usage
    main: |
      from typing import Any
      from django.utils.functional import classproperty

      class Foo:
          @classproperty
          def attr(cls: Any) -> str: ...

          reveal_type(attr)      # N: Revealed type is "django.utils.functional.classproperty[builtins.str]"
          reveal_type(attr.getter)  # N: Revealed type is "def (method: def (Any) -> builtins.str) -> django.utils.functional.classproperty[builtins.str]"

      reveal_type(Foo.attr)      # N: Revealed type is "builtins.str"

      class Bar(Foo):
          def method(self) -> None:
              reveal_type(self.attr)  # N: Revealed type is "builtins.str"
