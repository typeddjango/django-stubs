-   case: meta_attribute_has_a_type_of_current_model
    main: |
        from myapp.models import MyUser
        reveal_type(MyUser._meta)  # N: Revealed type is "django.db.models.options.Options[myapp.models.MyUser]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class MyUser(models.Model):
                    pass

-   case: get_field_returns_proper_field_type
    main: |
        from myapp.models import MyUser
        reveal_type(MyUser._meta.get_field('base_name'))  # N: Revealed type is "django.db.models.fields.CharField[builtins.str | builtins.int | django.db.models.expressions.Combinable, builtins.str]"
        reveal_type(MyUser.base_name.field)  # N: Revealed type is "django.db.models.fields.CharField[builtins.str | builtins.int | django.db.models.expressions.Combinable, builtins.str]"
        reveal_type(MyUser._meta.get_field('name'))  # N: Revealed type is "django.db.models.fields.CharField[builtins.str | builtins.int | django.db.models.expressions.Combinable, builtins.str]"
        reveal_type(MyUser.name.field)  # N: Revealed type is "django.db.models.fields.CharField[builtins.str | builtins.int | django.db.models.expressions.Combinable, builtins.str]"
        reveal_type(MyUser._meta.get_field('age'))  # N: Revealed type is "django.db.models.fields.IntegerField[builtins.float | builtins.int | builtins.str | django.db.models.expressions.Combinable, builtins.int]"
        reveal_type(MyUser.age.field)  # N: Revealed type is "django.db.models.fields.IntegerField[builtins.float | builtins.int | builtins.str | django.db.models.expressions.Combinable, builtins.int]"
        reveal_type(MyUser._meta.get_field('to_user'))  # N: Revealed type is "django.db.models.fields.related.ForeignKey[myapp.models.MyUser | django.db.models.expressions.Combinable, myapp.models.MyUser]"
        reveal_type(MyUser.to_user.field)  # N: Revealed type is "django.db.models.fields.related.ForeignKey[myapp.models.MyUser | django.db.models.expressions.Combinable, myapp.models.MyUser]"

        MyUser._meta.get_field('unknown')  # E: MyUser has no field named 'unknown'  [misc]
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class MyBaseUser(models.Model):
                    base_name = models.CharField(max_length=100)
                class MyUser(MyBaseUser):
                    name = models.CharField(max_length=100)
                    age = models.IntegerField()
                    to_user = models.ForeignKey('self', on_delete=models.SET_NULL)

-   case: get_field_with_abstract_inheritance
    main: |
        from myapp.models import AbstractModel
        class MyModel(AbstractModel):
            pass

        MyModel._meta.get_field('field')  # E: MyModel has no field named 'field'  [misc]

        field: str
        reveal_type(MyModel._meta.get_field(field))  # N: Revealed type is "django.db.models.fields.Field[Any, Any] | django.db.models.fields.reverse_related.ForeignObjectRel | django.contrib.contenttypes.fields.GenericForeignKey"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from django.contrib.postgres.fields import ArrayField
                from django_stubs_ext.db.models import TypedModelMeta
                class AbstractModel(models.Model):
                    class Meta(TypedModelMeta):
                        abstract = True

-   case: base_model_meta_incompatible_types
    main: |
        from django.db import models
        from django.contrib.postgres.fields import ArrayField
        from django_stubs_ext.db.models import TypedModelMeta

        class MyModel(models.Model):
            example = models.CharField(max_length=100)
            class Meta(TypedModelMeta):
                abstract = 7  # E: Incompatible types in assignment (expression has type "int", base class "TypedModelMeta" defined the type as "bool")  [assignment]
                verbose_name = ['test']  # E: Incompatible types in assignment (expression has type "list[str]", base class "TypedModelMeta" defined the type as "str | _StrPromise")  [assignment]
                unique_together = {1: 2}  # E: Incompatible types in assignment (expression has type "dict[int, int]", base class "TypedModelMeta" defined the type as "Sequence[Sequence[str]]")  [assignment]
                unknown_attr = True  # can't check this

        class MyModelMultipleBaseMeta(models.Model):
          class Meta(MyModel.Meta, TypedModelMeta):
              abstract = 7  # E: Incompatible types in assignment (expression has type "int", base class "TypedModelMeta" defined the type as "bool")  [assignment]

-   case: auto_base_model_meta_incompatible_types
    main: |
        from myapp.models import MyModelWithAutoTypedMeta
    installed_apps:
      - myapp
    files:
      - path: myapp/__init__.py
      - path: myapp/models.py
        content: |
            from django.db import models

            class MyModelWithAutoTypedMeta(models.Model):
                example = models.CharField(max_length=100)
                class Meta:
                    abstract = 0  # E: Incompatible types in assignment (expression has type "int", base class "TypedModelMeta" defined the type as "bool")  [assignment]
                    verbose_name = ['test']  # E: Incompatible types in assignment (expression has type "list[str]", base class "TypedModelMeta" defined the type as "str | _StrPromise")  [assignment]
                    unique_together = {1: 2}  # E: Incompatible types in assignment (expression has type "dict[int, int]", base class "TypedModelMeta" defined the type as "Sequence[Sequence[str]]")  [assignment]

            class DefinitelyNotAModel:
                class Meta:
                    abstract = 7
                    verbose_name = ['test']
                    unique_together = {1: 2}
                    unknown_attr = True

-   case: auto_base_model_meta_incompatible_types_multiple_inheritance
    main: |
        from myapp.models import MyModel, MyModel2, MyModel3
    installed_apps:
      - myapp
    files:
      - path: myapp/__init__.py
      - path: myapp/models.py
        content: |
            from django.db import models

            class MyModel(models.Model):
                class Meta:
                    abstract = 5  # E: Incompatible types in assignment (expression has type "int", base class "TypedModelMeta" defined the type as "bool")  [assignment]

            class MyModel2(models.Model):
                class Meta:
                    abstract = 5  # E: Incompatible types in assignment (expression has type "int", base class "TypedModelMeta" defined the type as "bool")  [assignment]

            class MyModel3(models.Model):
                class Meta(MyModel.Meta, MyModel2.Meta):
                    abstract = 0 # OK because both base classes currently define this as int
                    verbose_name = ['test']  # E: Incompatible types in assignment (expression has type "list[str]", base class "TypedModelMeta" defined the type as "str | _StrPromise")  [assignment]
                    unique_together = {1: 2}  # E: Incompatible types in assignment (expression has type "dict[int, int]", base class "TypedModelMeta" defined the type as "Sequence[Sequence[str]]")  [assignment]

-   case: instantiate_abstract_model
    main: |
        from myapp.models import AbstractModel, MyModel

        # Should not raise:
        MyModel(field=1)
        MyModel.objects.create(field=2)
        AbstractModel._default_manager.create()

        # Errors:
        AbstractModel()  # E: Cannot instantiate abstract class "AbstractModel" with abstract attributes "DoesNotExist" and "MultipleObjectsReturned"  [abstract]
        AbstractModel.objects.create()  # E: "type[AbstractModel]" has no attribute "objects"  [attr-defined]
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class AbstractModel(models.Model):
                    base = models.TextField()

                    class Meta:
                        abstract = True

                class MyModel(AbstractModel):
                    field = models.IntegerField()
