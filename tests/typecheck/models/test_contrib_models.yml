-   case: contrib_auth_model_fields
    main: |
        from typing import Type
        from django.contrib.auth.models import User
        reveal_type(User().username)  # N: Revealed type is "builtins.str"
        reveal_type(User().password)  # N: Revealed type is "builtins.str"
        reveal_type(User().first_name)  # N: Revealed type is "builtins.str"
        reveal_type(User().last_name)  # N: Revealed type is "builtins.str"
        reveal_type(User().email)  # N: Revealed type is "builtins.str"
        reveal_type(User().is_staff)  # N: Revealed type is "builtins.bool"
        reveal_type(User().is_active)  # N: Revealed type is "builtins.bool"
        reveal_type(User().date_joined)  # N: Revealed type is "datetime.datetime"
        reveal_type(User().last_login)  # N: Revealed type is "Union[datetime.datetime, None]"
        reveal_type(User().is_authenticated)  # N: Revealed type is "Literal[True]"
        reveal_type(User().is_anonymous)  # N: Revealed type is "Literal[False]"
        reveal_type(User().groups.get())  # N: Revealed type is "django.contrib.auth.models.Group"
        reveal_type(User().user_permissions.get())  # N: Revealed type is "django.contrib.auth.models.Permission"
        reveal_type(User.groups)  # N: Revealed type is "django.db.models.fields.related_descriptors.ManyToManyDescriptor[django.db.models.base.Model]"
        reveal_type(User.user_permissions)  # N: Revealed type is "django.db.models.fields.related_descriptors.ManyToManyDescriptor[django.db.models.base.Model]"

        from django.contrib.auth.models import AnonymousUser
        reveal_type(AnonymousUser().is_authenticated)  # N: Revealed type is "Literal[False]"
        reveal_type(AnonymousUser().is_anonymous)  # N: Revealed type is "Literal[True]"

        from django.contrib.auth.models import Permission
        reveal_type(Permission().name)  # N: Revealed type is "builtins.str"
        reveal_type(Permission().codename)  # N: Revealed type is "builtins.str"

        from django.contrib.auth.models import PermissionsMixin
        p: Type[PermissionsMixin]
        reveal_type(p().is_superuser)  # N: Revealed type is "builtins.bool"

        from django.contrib.auth.models import Group
        reveal_type(Group().name)  # N: Revealed type is "builtins.str"
        reveal_type(Group().permissions.get())  # N: Revealed type is "django.contrib.auth.models.Permission"
        reveal_type(Group.permissions)  # N: Revealed type is "django.db.models.fields.related_descriptors.ManyToManyDescriptor[django.contrib.auth.models.Group_permissions]"

-   case: can_override_abstract_user_manager
    main: |
        from myapp.models import MyBaseUser, MyUser
        reveal_type(MyBaseUser.objects)  # N: Revealed type is "myapp.models.MyBaseUserManager[myapp.models.MyBaseUser]"
        reveal_type(MyBaseUser.objects.all())  # N: Revealed type is "django.db.models.query._QuerySet[myapp.models.MyBaseUser, myapp.models.MyBaseUser]"
        reveal_type(MyUser.objects)  # N: Revealed type is "myapp.models.MyUserManager"
        reveal_type(MyUser.objects.all())  # N: Revealed type is "django.db.models.query._QuerySet[myapp.models.MyUser, myapp.models.MyUser]"
    installed_apps:
        - django.contrib.auth
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.contrib.auth.base_user import AbstractBaseUser, BaseUserManager
              from django.contrib.auth.models import AbstractUser, UserManager
              from typing import ClassVar
              class MyBaseUserManager(BaseUserManager["MyBaseUser"]):
                  ...

              class MyBaseUser(AbstractBaseUser):
                  objects = MyBaseUserManager()

              class MyUserManager(UserManager["MyUser"]):
                  ...
              class MyUser(AbstractUser):
                  objects: ClassVar[MyUserManager] = MyUserManager()

-   case: can_combine_permissions_mixin_and_abstract_base_user
    main: |
        from django.contrib.auth.base_user import AbstractBaseUser
        from django.contrib.auth.models import PermissionsMixin
        from myapp.models import AuthUser
        reveal_type(AuthUser._meta)
        reveal_type(AuthUser()._meta)
        reveal_type(PermissionsMixin._meta)
        reveal_type(AbstractBaseUser._meta)
    out: |
        main:4: note: Revealed type is "django.db.models.options.Options[myapp.models.AuthUser]"
        main:5: note: Revealed type is "django.db.models.options.Options[myapp.models.AuthUser]"
        main:6: note: Revealed type is "django.db.models.options.Options[django.contrib.auth.models.PermissionsMixin]"
        main:7: note: Revealed type is "django.db.models.options.Options[django.contrib.auth.base_user.AbstractBaseUser]"
    installed_apps:
        - django.contrib.auth
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.contrib.auth.base_user import AbstractBaseUser
              from django.contrib.auth.models import PermissionsMixin

              class AuthUser(AbstractBaseUser, PermissionsMixin):
                  class Meta:
                      abstract = False
                      db_table = "auth_user"
