-   case: contrib_admin_model_fields
    main: |
        from django.contrib.admin.models import LogEntry
        from django.contrib.auth.models import User
        from django.contrib.contenttypes.models import ContentType
        reveal_type(LogEntry().action_time)  # N: Revealed type is "datetime.datetime"
        reveal_type(LogEntry().user)  # N: Revealed type is "django.contrib.auth.models.AbstractUser"
        reveal_type(LogEntry().content_type)  # N: Revealed type is "Union[django.contrib.contenttypes.models.ContentType, None]"
        reveal_type(LogEntry().content_type_id)  # N: Revealed type is "Union[builtins.int, None]"
        reveal_type(LogEntry().object_id)  # N: Revealed type is "Union[builtins.str, None]"
        reveal_type(LogEntry().object_repr)  # N: Revealed type is "builtins.str"
        reveal_type(LogEntry().action_flag)  # N: Revealed type is "builtins.int"
        reveal_type(LogEntry().change_message)  # N: Revealed type is "builtins.str"
-   case: contrib_auth_model_fields
    main: |
        from typing import Type
        from django.contrib.auth.models import User
        reveal_type(User().username)  # N: Revealed type is "builtins.str"
        reveal_type(User().password)  # N: Revealed type is "builtins.str"
        reveal_type(User().first_name)  # N: Revealed type is "builtins.str"
        reveal_type(User().last_name)  # N: Revealed type is "builtins.str"
        reveal_type(User().email)  # N: Revealed type is "builtins.str"
        reveal_type(User().is_staff)  # N: Revealed type is "builtins.bool"
        reveal_type(User().is_active)  # N: Revealed type is "builtins.bool"
        reveal_type(User().date_joined)  # N: Revealed type is "datetime.datetime"
        reveal_type(User().last_login)  # N: Revealed type is "Union[datetime.datetime, None]"
        reveal_type(User().is_authenticated)  # N: Revealed type is "Literal[True]"
        reveal_type(User().is_anonymous)  # N: Revealed type is "Literal[False]"
        reveal_type(User().groups.get())  # N: Revealed type is "django.contrib.auth.models.Group"
        reveal_type(User().user_permissions.get())  # N: Revealed type is "django.contrib.auth.models.Permission"
        reveal_type(User.groups)  # N: Revealed type is "django.db.models.fields.related_descriptors.ManyToManyDescriptor[django.contrib.auth.models.Group, django.contrib.auth.models._User_groups]"
        reveal_type(User.user_permissions)  # N: Revealed type is "django.db.models.fields.related_descriptors.ManyToManyDescriptor[django.contrib.auth.models.Permission, django.contrib.auth.models._User_permissions]"

        from django.contrib.auth.models import AnonymousUser
        reveal_type(AnonymousUser().is_authenticated)  # N: Revealed type is "Literal[False]"
        reveal_type(AnonymousUser().is_anonymous)  # N: Revealed type is "Literal[True]"

        from django.contrib.auth.models import Permission
        reveal_type(Permission().name)  # N: Revealed type is "builtins.str"
        reveal_type(Permission().content_type)  # N: Revealed type is "django.contrib.contenttypes.models.ContentType"
        reveal_type(Permission().content_type_id)  # N: Revealed type is "builtins.int"
        reveal_type(Permission().codename)  # N: Revealed type is "builtins.str"
        reveal_type(Permission.user_set)  # N: Revealed type is "django.db.models.fields.related_descriptors.ManyToManyDescriptor[django.contrib.auth.models.User, django.contrib.auth.models._User_permissions]"
        reveal_type(Permission.group_set)  # N: Revealed type is "django.db.models.fields.related_descriptors.ManyToManyDescriptor[django.contrib.auth.models.Group, django.contrib.auth.models._Group_permissions]"

        from django.contrib.auth.models import PermissionsMixin
        p: Type[PermissionsMixin]
        reveal_type(p().is_superuser)  # N: Revealed type is "builtins.bool"

        from django.contrib.auth.models import Group
        reveal_type(Group().name)  # N: Revealed type is "builtins.str"
        reveal_type(Group().permissions.get())  # N: Revealed type is "django.contrib.auth.models.Permission"
        reveal_type(Group.permissions)  # N: Revealed type is "django.db.models.fields.related_descriptors.ManyToManyDescriptor[django.contrib.auth.models.Permission, django.contrib.auth.models._Group_permissions]"

-   case: contrib_contenttype_model_fields
    main: |
        from django.contrib.contenttypes.models import ContentType
        from django.contrib.auth.models import User
        reveal_type(ContentType().app_label)  # N: Revealed type is "builtins.str"
        reveal_type(ContentType().model)  # N: Revealed type is "builtins.str"
        reveal_type(ContentType.logentry_set)  # N: Revealed type is "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor[django.contrib.admin.models.LogEntry]"
        reveal_type(ContentType.permission_set)  # N: Revealed type is "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor[django.contrib.auth.models.Permission]"
        reveal_type(ContentType.objects)  # N: Revealed type is "django.contrib.contenttypes.models.ContentTypeManager"
        reveal_type(ContentType.objects.all())  # N: Revealed type is "django.db.models.query.QuerySet[django.contrib.contenttypes.models.ContentType, django.contrib.contenttypes.models.ContentType]"

-   case: contrib_flatpages_model_fields
    main: |
        from django.contrib.flatpages.models import FlatPage
        from django.contrib.auth.models import User
        reveal_type(FlatPage().url)  # N: Revealed type is "builtins.str"
        reveal_type(FlatPage().title)  # N: Revealed type is "builtins.str"
        reveal_type(FlatPage().content)  # N: Revealed type is "builtins.str"
        reveal_type(FlatPage().enable_comments)  # N: Revealed type is "builtins.bool"
        reveal_type(FlatPage().template_name)  # N: Revealed type is "builtins.str"
        reveal_type(FlatPage().registration_required)  # N: Revealed type is "builtins.bool"
        reveal_type(FlatPage.sites)  # N: Revealed type is "django.db.models.fields.related_descriptors.ManyToManyDescriptor[django.contrib.sites.models.Site, django.contrib.flatpages.models._FlatPage_sites]"

-   case: contrib_redirects_model_fields
    main: |
        from django.contrib.redirects.models import Redirect
        from django.contrib.auth.models import User
        reveal_type(Redirect().site)  # N: Revealed type is "django.contrib.sites.models.Site"
        reveal_type(Redirect().old_path)  # N: Revealed type is "builtins.str"
        reveal_type(Redirect().new_path)  # N: Revealed type is "builtins.str"
        reveal_type(Redirect().site_id)  # N: Revealed type is "builtins.int"

-   case: contrib_sessions_model_fields
    main: |
        from django.contrib.sessions.models import Session
        from django.contrib.auth.models import User
        reveal_type(Session().session_key)  # N: Revealed type is "builtins.str"
        reveal_type(Session().session_data)  # N: Revealed type is "builtins.str"
        reveal_type(Session().expire_date)  # N: Revealed type is "datetime.datetime"
        reveal_type(Session.objects)  # N: Revealed type is "django.contrib.sessions.models.SessionManager[django.contrib.sessions.models.Session]"

-   case: contrib_sites_model_fields
    main: |
        from django.contrib.sites.models import Site
        reveal_type(Site().domain)  # N: Revealed type is "builtins.str"
        reveal_type(Site().name)  # N: Revealed type is "builtins.str"
        reveal_type(Site.flatpage_set)  # N: Revealed type is "django.db.models.fields.related_descriptors.ManyToManyDescriptor[django.contrib.flatpages.models.FlatPage, django.contrib.flatpages.models._FlatPage_sites]"
        reveal_type(Site.redirect_set)  # N: Revealed type is "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor[django.contrib.redirects.models.Redirect]"
        reveal_type(Site.objects)  # N: Revealed type is "django.contrib.sites.models.SiteManager"

-   case: contrib_gis_db_backends_model_fields
    main: |
        from django.contrib.gis.db.backends.oracle.models import (
            OracleGeometryColumns,
            OracleSpatialRefSys,
        )
        from django.contrib.gis.db.backends.postgis.models import (
            PostGISGeometryColumns,
            PostGISSpatialRefSys,
        )
        from django.contrib.gis.db.backends.spatialite.models import (
            SpatialiteGeometryColumns,
            SpatialiteSpatialRefSys,
        )

        reveal_type(OracleGeometryColumns().table_name)  # N: Revealed type is "builtins.str"
        reveal_type(OracleGeometryColumns().column_name)  # N: Revealed type is "builtins.str"
        reveal_type(OracleGeometryColumns().srid)  # N: Revealed type is "builtins.int"
        reveal_type(OracleGeometryColumns.objects)  # N: Revealed type is "django.db.models.manager.Manager[django.contrib.gis.db.backends.oracle.models.OracleGeometryColumns]"
        reveal_type(OracleSpatialRefSys().cs_name)  # N: Revealed type is "builtins.str"
        reveal_type(OracleSpatialRefSys().srid)  # N: Revealed type is "builtins.int"
        reveal_type(OracleSpatialRefSys().auth_name)  # N: Revealed type is "builtins.str"
        reveal_type(OracleSpatialRefSys().auth_srid)  # N: Revealed type is "builtins.int"
        reveal_type(OracleSpatialRefSys().wktext)  # N: Revealed type is "builtins.str"
        reveal_type(OracleSpatialRefSys().cs_bounds)  # N: Revealed type is "django.contrib.gis.geos.polygon.Polygon"
        reveal_type(OracleSpatialRefSys.objects)  # N: Revealed type is "django.db.models.manager.Manager[django.contrib.gis.db.backends.oracle.models.OracleSpatialRefSys]"

        reveal_type(PostGISGeometryColumns().f_table_catalog)  # N: Revealed type is "builtins.str"
        reveal_type(PostGISGeometryColumns().f_table_schema)  # N: Revealed type is "builtins.str"
        reveal_type(PostGISGeometryColumns().f_table_name)  # N: Revealed type is "builtins.str"
        reveal_type(PostGISGeometryColumns().f_geometry_column)  # N: Revealed type is "builtins.str"
        reveal_type(PostGISGeometryColumns().coord_dimension)  # N: Revealed type is "builtins.int"
        reveal_type(PostGISGeometryColumns().srid)  # N: Revealed type is "builtins.int"
        reveal_type(PostGISGeometryColumns().type)  # N: Revealed type is "builtins.str"
        reveal_type(PostGISGeometryColumns.objects)  # N: Revealed type is "django.db.models.manager.Manager[django.contrib.gis.db.backends.postgis.models.PostGISGeometryColumns]"
        reveal_type(PostGISSpatialRefSys().srid)  # N: Revealed type is "builtins.int"
        reveal_type(PostGISSpatialRefSys().auth_name)  # N: Revealed type is "builtins.str"
        reveal_type(PostGISSpatialRefSys().auth_srid)  # N: Revealed type is "builtins.int"
        reveal_type(PostGISSpatialRefSys().srtext)  # N: Revealed type is "builtins.str"
        reveal_type(PostGISSpatialRefSys().proj4text)  # N: Revealed type is "builtins.str"
        reveal_type(PostGISSpatialRefSys.objects)  # N: Revealed type is "django.db.models.manager.Manager[django.contrib.gis.db.backends.postgis.models.PostGISSpatialRefSys]"

        reveal_type(SpatialiteGeometryColumns().f_table_name)  # N: Revealed type is "builtins.str"
        reveal_type(SpatialiteGeometryColumns().f_geometry_column)  # N: Revealed type is "builtins.str"
        reveal_type(SpatialiteGeometryColumns().coord_dimension)  # N: Revealed type is "builtins.int"
        reveal_type(SpatialiteGeometryColumns().srid)  # N: Revealed type is "builtins.int"
        reveal_type(SpatialiteGeometryColumns().spatial_index_enabled)  # N: Revealed type is "builtins.int"
        reveal_type(SpatialiteGeometryColumns().type)  # N: Revealed type is "builtins.int"
        reveal_type(SpatialiteGeometryColumns.objects)  # N: Revealed type is "django.db.models.manager.Manager[django.contrib.gis.db.backends.spatialite.models.SpatialiteGeometryColumns]"
        reveal_type(SpatialiteSpatialRefSys().srid)  # N: Revealed type is "builtins.int"
        reveal_type(SpatialiteSpatialRefSys().auth_name)  # N: Revealed type is "builtins.str"
        reveal_type(SpatialiteSpatialRefSys().auth_srid)  # N: Revealed type is "builtins.int"
        reveal_type(SpatialiteSpatialRefSys().ref_sys_name)  # N: Revealed type is "builtins.str"
        reveal_type(SpatialiteSpatialRefSys().proj4text)  # N: Revealed type is "builtins.str"
        reveal_type(SpatialiteSpatialRefSys().srtext)  # N: Revealed type is "builtins.str"
        reveal_type(SpatialiteSpatialRefSys.objects)  # N: Revealed type is "django.db.models.manager.Manager[django.contrib.gis.db.backends.spatialite.models.SpatialiteSpatialRefSys]"

-   case: can_override_abstract_user_manager
    main: |
        from myapp.models import MyBaseUser, MyUser
        reveal_type(MyBaseUser.objects)  # N: Revealed type is "myapp.models.MyBaseUserManager"
        reveal_type(MyBaseUser.objects.all())  # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.MyBaseUser, myapp.models.MyBaseUser]"
        reveal_type(MyUser.objects)  # N: Revealed type is "myapp.models.MyUserManager"
        reveal_type(MyUser.objects.all())  # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.MyUser, myapp.models.MyUser]"
    installed_apps:
        - django.contrib.auth
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.contrib.auth.base_user import AbstractBaseUser, BaseUserManager
              from django.contrib.auth.models import AbstractUser, UserManager
              from typing import ClassVar
              class MyBaseUserManager(BaseUserManager["MyBaseUser"]):
                  ...

              class MyBaseUser(AbstractBaseUser):
                  objects = MyBaseUserManager()

              class MyUserManager(UserManager["MyUser"]):
                  ...
              class MyUser(AbstractUser):
                  objects: ClassVar[MyUserManager] = MyUserManager()

-   case: can_combine_permissions_mixin_and_abstract_base_user
    main: |
        from django.contrib.auth.base_user import AbstractBaseUser
        from django.contrib.auth.models import PermissionsMixin
        from myapp.models import AuthUser
        reveal_type(AuthUser._meta)
        reveal_type(AuthUser()._meta)
        reveal_type(PermissionsMixin._meta)
        reveal_type(AbstractBaseUser._meta)
    out: |
        main:4: note: Revealed type is "django.db.models.options.Options[myapp.models.AuthUser]"
        main:5: note: Revealed type is "django.db.models.options.Options[myapp.models.AuthUser]"
        main:6: note: Revealed type is "django.db.models.options.Options[django.contrib.auth.models.PermissionsMixin]"
        main:7: note: Revealed type is "django.db.models.options.Options[django.contrib.auth.base_user.AbstractBaseUser]"
    installed_apps:
        - django.contrib.auth
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.contrib.auth.base_user import AbstractBaseUser
              from django.contrib.auth.models import PermissionsMixin

              class AuthUser(AbstractBaseUser, PermissionsMixin):
                  class Meta:
                      abstract = False
                      db_table = "auth_user"

-   case: test_relation_specified_by_auth_user_model
    main: |
        from other.models import Other
        reveal_type(Other().users.get())
        reveal_type(Other.users.through)
        reveal_type(Other.users.through().myuser)
        reveal_type(Other.users.through.objects.get().myuser)

        reveal_type(Other().user)

        reveal_type(Other().unq_user)
    out: |
        main:2: note: Revealed type is "myapp.models.MyUser"
        main:3: note: Revealed type is "Type[other.models.Other_users]"
        main:4: note: Revealed type is "myapp.models.MyUser"
        main:5: note: Revealed type is "myapp.models.MyUser"

        main:7: note: Revealed type is "myapp.models.MyUser"

        main:9: note: Revealed type is "myapp.models.MyUser"
    monkeypatch: true
    custom_settings: |
        INSTALLED_APPS = ('django.contrib.contenttypes', 'django.contrib.auth', 'myapp', 'other')
        AUTH_USER_MODEL='myapp.MyUser'
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models

              class MyUser(models.Model):
                  ...
        - path: other/__init__.py
        - path: other/models.py
          content: |
              from myapp.models import MyUser
              from django.conf import settings
              from django.db import models

              class Other_users(models.Model):
                  myuser = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)

              class Other(models.Model):
                  users = models.ManyToManyField[MyUser, Other_users](settings.AUTH_USER_MODEL, through='Other_users')
                  user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
                  unq_user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)

-   case: test_relate_to_auth_user_model_when_auth_not_installed
    main: |
        from other.models import Other
        reveal_type(Other().user)
    out: |
        main:2: note: Revealed type is "myapp.models.MyUser"
    custom_settings: |
        INSTALLED_APPS = ('django.contrib.contenttypes', 'myapp', 'other')
        AUTH_USER_MODEL='myapp.MyUser'
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models

              class MyUser(models.Model):
                  ...
        - path: other/__init__.py
        - path: other/models.py
          content: |
              from django.conf import settings
              from django.db import models

              class Other(models.Model):
                  user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)

-   case: test_permissions_inherited_reverse_relations
    main: |
        from django.contrib.auth.models import Group, Permission
        from django.contrib.contenttypes.models import ContentType
        reveal_type(Permission().user_set)  # N: Revealed type is "django.db.models.fields.related_descriptors.ManyRelatedManager[django.contrib.auth.models.User, django.contrib.auth.models._User_permissions]"
        reveal_type(Group().user_set)  # N: Revealed type is "django.db.models.fields.related_descriptors.ManyRelatedManager[django.contrib.auth.models.User, django.contrib.auth.models._User_groups]"
        reveal_type(ContentType.permission_set)  # N: Revealed type is "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor[django.contrib.auth.models.Permission]"
        reveal_type(ContentType().permission_set)  # N: Revealed type is "django.contrib.auth.models.Permission_RelatedManager"
    custom_settings: |
        INSTALLED_APPS = ('django.contrib.contenttypes', 'django.contrib.auth')
        AUTH_USER_MODEL='auth.User'
