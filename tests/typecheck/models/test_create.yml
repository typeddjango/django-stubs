-   case: default_manager_create_is_typechecked
    main: |
        from myapp.models import User
        User.objects.create(pk=1, name='Max', age=10)
        User.objects.create(age=[])  # E: Incompatible type for "age" of "User" (got "List[Any]", expected "Union[float, int, str, Combinable]")  [misc]
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class User(models.Model):
                    name = models.CharField(max_length=100)
                    age = models.IntegerField()

-   case: model_recognises_parent_attributes
    main: |
        from myapp.models import Child
        c = Child.objects.create(name='Maxim', lastname='Maxim2')
        reveal_type(c.id)  # N: Revealed type is "builtins.int"
        reveal_type(c.name)  # N: Revealed type is "builtins.str"
        reveal_type(c.lastname)  # N: Revealed type is "builtins.str"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class Parent(models.Model):
                    name = models.CharField(max_length=100)
                class Child(Parent):
                    lastname = models.CharField(max_length=100)

-   case: deep_multiple_inheritance_with_create
    main: |
        from myapp.models import Child4
        Child4.objects.create(name1='n1', name2='n2', value=1, value4=4)
    out: |
        myapp/models:9: error: Definition of "child1" in base class "Parent1" is incompatible with definition in base class "Parent2"  [misc]
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class Parent1(models.Model):
                    name1 = models.CharField(max_length=50)
                class Parent2(models.Model):
                    id2 = models.AutoField(primary_key=True)
                    name2 = models.CharField(max_length=50)

                class Child1(Parent1, Parent2):
                    value = models.IntegerField()
                class Child4(Child1):
                    value4 = models.IntegerField()

-   case: mro_is_walked_for_field_annotations
    main: |
        from myapp.models import Child
        Child.objects.create(dct={"hello": "world"})  # no errors
        reveal_type(Child().dct)  # N: Revealed type is "builtins.dict[builtins.str, builtins.str]"
    monkeypatch: true
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from __future__ import annotations

                from django.db import models

                class JSONField(models.TextField[dict[str, str], dict[str, str]]): pass  # incomplete

                class Base(models.Model):
                    dct = JSONField()

                class Child(Base): pass

-   case: optional_id_fields_for_create_is_error_if_not_autofield
    main: |
        from myapp.models import Publisher, Book

        Book.objects.create(id=None)  # E: Incompatible type for "id" of "Book" (got "None", expected "Union[float, int, str, Combinable]")  [misc]
        Book.objects.create(publisher=None)  # E: Incompatible type for "publisher" of "Book" (got "None", expected "Union[Publisher, Combinable]")  [misc]
        Book.objects.create(publisher_id=None)  # E: Incompatible type for "publisher_id" of "Book" (got "None", expected "Union[Combinable, int, str]")  [misc]
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class Publisher(models.Model):
                    pass
                class Book(models.Model):
                    id = models.IntegerField(primary_key=True)
                    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)

-   case: none_for_primary_key_is_allowed_if_field_is_autogenerated
    main: |
        from myapp.models import Book
        Book.objects.create(id=None)
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class Book(models.Model):
                    pass

-   case: when_default_for_primary_key_is_specified_allow_none_to_be_set
    main: |
        from myapp.models import MyModel
        first = MyModel(id=None)
        reveal_type(first.id)  # N: Revealed type is "builtins.int"
        first = MyModel.objects.create(id=None)
        reveal_type(first.id)  # N: Revealed type is "builtins.int"
        first = MyModel()
        first.id = None
        reveal_type(first.id)  # N: Revealed type is "builtins.int"

        from myapp.models import MyModel2
        MyModel2(id=None)  # E: Incompatible type for "id" of "MyModel2" (got "None", expected "Union[float, int, str, Combinable]")  [misc]
        MyModel2.objects.create(id=None)  # E: Incompatible type for "id" of "MyModel2" (got "None", expected "Union[float, int, str, Combinable]")  [misc]
        second = MyModel2()
        second.id = None  # E: Incompatible types in assignment (expression has type "None", variable has type "Union[float, int, str, Combinable]")  [assignment]
        reveal_type(second.id)  # N: Revealed type is "builtins.int"

        # default set but no primary key doesn't allow None
        from myapp.models import MyModel3
        MyModel3(default=None)  # E: Incompatible type for "default" of "MyModel3" (got "None", expected "Union[float, int, str, Combinable]")  [misc]
        MyModel3.objects.create(default=None)  # E: Incompatible type for "default" of "MyModel3" (got "None", expected "Union[float, int, str, Combinable]")  [misc]
        third = MyModel3()
        third.default = None  # E: Incompatible types in assignment (expression has type "None", variable has type "Union[float, int, str, Combinable]")  [assignment]
        reveal_type(third.default)  # N: Revealed type is "builtins.int"
    monkeypatch: true
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from typing import Optional, Union
                from django.db import models
                from django.db.models.expressions import Combinable

                def return_int() -> int:
                    return 0
                class MyModel(models.Model):
                    id = models.IntegerField[Optional[Union[float, int, str, Combinable]], int](default=return_int, primary_key=True)
                class MyModel2(models.Model):
                    id = models.IntegerField(primary_key=True)
                class MyModel3(models.Model):
                    default = models.IntegerField(default=return_int)

-   case: default_manager_acreate_is_typechecked
    main: |
        import asyncio
        from myapp.models import User
        async def amain() -> None:
            reveal_type(await User.objects.acreate(pk=1, name='Max', age=10))  # N: Revealed type is "myapp.models.User"
            await User.objects.acreate(age=[])  # E: Incompatible type for "age" of "User" (got "List[Any]", expected "Union[float, int, str, Combinable]")  [misc]
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class User(models.Model):
                    name = models.CharField(max_length=100)
                    age = models.IntegerField()
