-   case: register_filter_unnamed
    main: |
        from django import template
        register = template.Library()

        @register.filter
        def lower(value: str) -> str:
            return value.lower()

        reveal_type(lower) # N: Revealed type is "def (value: builtins.str) -> builtins.str"

-   case: register_filter_named
    main: |
        from django import template
        register = template.Library()

        @register.filter(name="tolower")
        def lower(value: str) -> str:
            return value.lower()

        reveal_type(lower) # N: Revealed type is "def (value: builtins.str) -> builtins.str"

-   case: register_filter_no_decorator
    main: |
        from django import template
        register = template.Library()

        def lower(value: str) -> str:
            return value.lower()

        registered = register.filter("tolower", lower)

        reveal_type(registered) # N: Revealed type is "def (value: builtins.str) -> builtins.str"

-   case: register_bad_filters
    main: |
        from django import template
        register = template.Library()

        @register.filter
        def lower() -> str:
            return ""

        @register.filter(name="toomanyargs")
        def toomanyargs(arg1: str, arg2: str, arg3: str) -> str:
            return ""
    out: |
        main:4: error: Value of type variable "_FilterC" of "filter" of "Library" cannot be "Callable[[], str]"  [type-var]
        main:8: error: Value of type variable "_FilterC" of function cannot be "Callable[[str, str, str], str]"  [type-var]

-   case: register_simple_tag_no_args
    main: |
        import datetime
        from django import template
        register = template.Library()

        @register.simple_tag
        def current_time(format_string: str) -> str:
            return datetime.datetime.now().strftime(format_string)

        reveal_type(current_time) # N: Revealed type is "def (format_string: builtins.str) -> builtins.str"

-   case: register_simple_tag_context
    main: |
        from django import template
        from django.template.context import Context
        from typing import Dict, Any
        register = template.Library()

        @register.simple_tag(takes_context=True)
        def current_time(context: Context, format_string: str) -> str:
            timezone = context['timezone']
            return "test"

        reveal_type(current_time) # N: Revealed type is "def (context: django.template.context.Context, format_string: builtins.str) -> builtins.str"

-   case: register_simple_tag_named
    main: |
        from django import template
        from typing import Dict, Any
        register = template.Library()

        @register.simple_tag(name='minustwo')
        def some_function(value: int) -> int:
            return value - 2

        reveal_type(some_function) # N: Revealed type is "def (value: builtins.int) -> builtins.int"

-   case: register_tag_no_args
    main: |
        from django import template
        from django.template.base import Parser, Token
        from django.template.defaulttags import CycleNode
        register = template.Library()

        @register.tag
        def cycle(parser: Parser, token: Token) -> CycleNode:
            return CycleNode([])

        reveal_type(cycle) # N: Revealed type is "def (parser: django.template.base.Parser, token: django.template.base.Token) -> django.template.defaulttags.CycleNode"

-   case: register_tag_named
    main: |
        from django import template
        from django.template.base import Parser, Token
        from django.template.defaulttags import CycleNode
        register = template.Library()

        @register.tag(name="cycle")
        def cycle_impl(parser: Parser, token: Token) -> CycleNode:
            return CycleNode([])

        reveal_type(cycle_impl) # N: Revealed type is "def (parser: django.template.base.Parser, token: django.template.base.Token) -> django.template.defaulttags.CycleNode"

-   case: register_inclusion_tag
    main: |
        from django import template
        from typing import List
        register = template.Library()

        @register.inclusion_tag('results.html')
        def format_results(results: List[str]) -> str:
            return ', '.join(results)

        reveal_type(format_results) # N: Revealed type is "def (results: builtins.list[builtins.str]) -> builtins.str"

-   case: register_inclusion_tag_takes_context
    main: |
        from django import template
        from django.template.context import Context

        from typing import List
        register = template.Library()

        @register.inclusion_tag('results.html', takes_context=True)
        def format_results(context: Context, results: List[str]) -> str:
            return ', '.join(results)

        reveal_type(format_results) # N: Revealed type is "def (context: django.template.context.Context, results: builtins.list[builtins.str]) -> builtins.str"

-   case: stringfilter
    main: |
        from django.template.defaultfilters import stringfilter

        @stringfilter
        def lower(value: str) -> str:
            return value.lower()

        reveal_type(lower) # N: Revealed type is "def (builtins.object) -> builtins.str"
