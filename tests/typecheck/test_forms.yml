-   case: no_incompatible_meta_nested_class_false_positive
    main: |
        from django import forms
        from myapp.models import Article, Category
        class ArticleForm(forms.ModelForm):
            class Meta:
                model = Article
                fields = '__all__'
        class CategoryForm(forms.ModelForm):
            class Meta:
                model = Category
                fields = '__all__'
        class CompositeForm(ArticleForm, CategoryForm):
            pass
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class Article(models.Model):
                    pass
                class Category(models.Model):
                    pass

-   case: formview_methods_on_forms_return_proper_types
    main: |
        from typing import Any
        from django import forms
        from django.http import HttpRequest, HttpResponse
        from django.views.generic.edit import FormView

        class MyForm(forms.ModelForm):
            pass
        class MyForm2(forms.ModelForm):
            pass
        class MyView(FormView):
            form_class = MyForm
            def post(self, request: HttpRequest, *args: Any, **kwds: Any) -> HttpResponse:
                form_class = self.get_form_class()
                reveal_type(form_class)  # N: Revealed type is "Type[main.MyForm]"
                reveal_type(self.get_form(None))  # N: Revealed type is "main.MyForm"
                reveal_type(self.get_form())  # N: Revealed type is "main.MyForm"
                reveal_type(self.get_form(form_class))  # N: Revealed type is "main.MyForm"
                reveal_type(self.get_form(MyForm2))  # N: Revealed type is "main.MyForm2"
                return HttpResponse()

-   case: updateview_form_valid_has_form_save
    main: |
        from django import forms
        from django.http import HttpResponse
        from django.views.generic.edit import UpdateView

        class MyForm(forms.ModelForm):
            pass
        class MyView(UpdateView):
            form_class = MyForm
            def form_valid(self, form: forms.BaseModelForm) -> HttpResponse:
                reveal_type(form.save)  # N: Revealed type is "def (commit: builtins.bool =) -> Any"
                return HttpResponse()

-   case: successmessagemixin_compatible_with_formmixin
    main: |
        from django.views.generic.edit import FormMixin
        from django.contrib.messages.views import SuccessMessageMixin

        class FormFirstView(FormMixin, SuccessMessageMixin):
            pass

        class SuccessMessageFirstView(FormMixin, SuccessMessageMixin):
            pass

-   case: generic_modelchoicefield_label_from_instance
    main: |
        from django import forms
        from myapp.models import Article, Category

        class ArticleChoiceField(forms.ModelChoiceField[Article]):
            def label_from_instance(self, obj: Article) -> str:
                return obj.name

        class BrokenArticleChoiceField(forms.ModelChoiceField[Article]):
            def label_from_instance(self, obj: Article) -> str:
                return obj.title # E: "Article" has no attribute "title"  [attr-defined]

        class ArticleMultipleChoiceField(forms.ModelMultipleChoiceField[Article]):
            def label_from_instance(self, obj: Article) -> str:
                return obj.name

        class ChooseArticleForm(forms.Form):
            articles = ArticleMultipleChoiceField(
                queryset=Article.objects.none(),
            )
            best_article = ArticleChoiceField(
                queryset=Article.objects.none(),
            )
            best_category = ArticleChoiceField(
                queryset=Category.objects.none(), # E: Argument "queryset" to "ArticleChoiceField" has incompatible type "QuerySet[Category, Category]"; expected "Union[Manager[Article], QuerySet[Article, Article], None]"  [arg-type]
            )
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class Category(models.Model):
                    title = models.CharField(max_length=128)

                class Article(models.Model):
                    name = models.CharField(max_length=128)
