-   case: request_object_has_user_of_type_auth_user_model
    main: |
        from django.http.request import HttpRequest
        reveal_type(HttpRequest().user)  # N: Revealed type is "Union[myapp.models.MyUser, django.contrib.auth.models.AnonymousUser]"
        # check that other fields work ok
        reveal_type(HttpRequest().method)  # N: Revealed type is "Union[builtins.str, None]"
    custom_settings: |
        INSTALLED_APPS = ('django.contrib.contenttypes', 'django.contrib.auth', 'myapp')
        AUTH_USER_MODEL='myapp.MyUser'
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class MyUser(models.Model):
                    pass
-   case: request_object_user_can_be_descriminated
    main: |
        from django.http.request import HttpRequest
        request = HttpRequest()
        reveal_type(request.user) # N: Revealed type is "Union[django.contrib.auth.models.User, django.contrib.auth.models.AnonymousUser]"
        if not request.user.is_anonymous:
            reveal_type(request.user) # N: Revealed type is "django.contrib.auth.models.User"
        if request.user.is_authenticated:
            reveal_type(request.user) # N: Revealed type is "django.contrib.auth.models.User"
            reveal_type(request.user.groups.all().get())  # N: Revealed type is "django.contrib.auth.models.Group"
    custom_settings: |
        INSTALLED_APPS = ('django.contrib.contenttypes', 'django.contrib.auth')
-   case: request_object_user_without_auth_and_contenttypes_apps
    main: |
        from django.http.request import HttpRequest
        request = HttpRequest()
        reveal_type(request.user) # N: Revealed type is "Union[django.contrib.auth.base_user.AbstractBaseUser, django.contrib.auth.models.AnonymousUser]"
        if request.user.is_authenticated:
            reveal_type(request.user) # N: Revealed type is "django.contrib.auth.base_user.AbstractBaseUser"
-   case: request_object_user_without_auth_but_with_contenttypes_apps
    main: |
        from django.http.request import HttpRequest
        request = HttpRequest()
        reveal_type(request.user) # N: Revealed type is "Union[django.contrib.auth.base_user.AbstractBaseUser, django.contrib.auth.models.AnonymousUser]"
        if request.user.is_authenticated:
            reveal_type(request.user) # N: Revealed type is "django.contrib.auth.base_user.AbstractBaseUser"
    custom_settings: |
        INSTALLED_APPS = ('django.contrib.contenttypes',)
-   case: subclass_request_not_changed_user_type
    main: |
        from django.http.request import HttpRequest
        class MyRequest(HttpRequest):
            foo: int # Just do something

        request = MyRequest()
        reveal_type(request.user) # N: Revealed type is "Union[django.contrib.auth.models.User, django.contrib.auth.models.AnonymousUser]"
    custom_settings: |
        INSTALLED_APPS = ('django.contrib.contenttypes', 'django.contrib.auth')

-   case: subclass_request_changed_user_type
    main: |
        from django.http.request import HttpRequest
        from django.contrib.auth.models import User
        class MyRequest(HttpRequest):
            user: User # Override the type of user

        request = MyRequest()
        reveal_type(request.user) # N: Revealed type is "django.contrib.auth.models.User"
    custom_settings: |
        INSTALLED_APPS = ('django.contrib.contenttypes', 'django.contrib.auth')

-   case: request_get_post
    main: |
        from django.http.request import HttpRequest

        request = HttpRequest()
        reveal_type(request)  # N: Revealed type is "django.http.request._MutableHttpRequest"
        reveal_type(request.GET)  # N: Revealed type is "django.http.request.QueryDict"
        request.GET['foo'] = 'bar'

        def mk_request() -> HttpRequest:
            return HttpRequest()

        req = mk_request()
        reveal_type(req)  # N: Revealed type is "django.http.request.HttpRequest"
        reveal_type(req.GET)  # N: Revealed type is "django.http.request._ImmutableQueryDict"
        req.GET.setdefault('foo', 'bar')  # E: This QueryDict is immutable.  [misc]
        x = 1  # E: Statement is unreachable  [unreachable]

-   case: request_get_post_unreachable
    main: |
        from django.http.request import HttpRequest

        request = HttpRequest()
        reveal_type(request)  # N: Revealed type is "django.http.request._MutableHttpRequest"
        reveal_type(request.GET)  # N: Revealed type is "django.http.request.QueryDict"
        request.GET['foo'] = 'bar'

        def mk_request() -> HttpRequest:
            return HttpRequest()

        req = mk_request()
        reveal_type(req)  # N: Revealed type is "django.http.request.HttpRequest"
        reveal_type(req.GET)  # N: Revealed type is "django.http.request._ImmutableQueryDict"
        req.GET['foo'] = 'bar'  # E: This QueryDict is immutable.  [misc]
        x = 1  # E: Statement is unreachable  [unreachable]
