-   case: union_queryset_custom_method
    main: |
        from django.db.models import QuerySet
        from myapp.models import User, Order

        instance: Order | User = User()

        model_cls = type(instance)

        reveal_type(model_cls) # N: Revealed type is "type[myapp.models.Order] | type[myapp.models.User]"
        reveal_type(model_cls.objects)  # N: Revealed type is "myapp.models.ManagerFromMyQuerySet[myapp.models.Order, myapp.models.MyQuerySet[myapp.models.Order, myapp.models.Order]] | myapp.models.ManagerFromMyQuerySet[myapp.models.User, myapp.models.MyQuerySet[myapp.models.User, myapp.models.User]]"
        reveal_type(model_cls.objects.my_method())  # N: Revealed type is "myapp.models.MyQuerySet[myapp.models.Order, myapp.models.Order] | myapp.models.MyQuerySet[myapp.models.User, myapp.models.User]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from __future__ import annotations
                from django.db import models
                from typing_extensions import Self

                class MyQuerySet(models.QuerySet):
                    def my_method(self) -> Self:
                      pass

                UserManager = models.Manager.from_queryset(MyQuerySet)
                class User(models.Model):
                    objects = UserManager()

                OrderManager = models.Manager.from_queryset(MyQuerySet)
                class Order(models.Model):
                    objects = OrderManager()
