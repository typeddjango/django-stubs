-   case: self_return_management
    main: |
        from myapp.models import MyModel, MyModelWithoutSelf
        reveal_type(MyModel.objects.example_simple())  # N: Revealed type is "myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.example_list())  # N: Revealed type is "builtins.list[myapp.models.MyQuerySet[myapp.models.MyModel]]"
        reveal_type(MyModel.objects.example_simple().just_int())  # N: Revealed type is "builtins.int"
        reveal_type(MyModel.objects.example_dict())  # N: Revealed type is "builtins.dict[builtins.str, myapp.models.MyQuerySet[myapp.models.MyModel]]"
        reveal_type(MyModelWithoutSelf.objects.method())  # N: Revealed type is "myapp.models.QuerySetWithoutSelf"

    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from typing import List, Dict, TypeVar, ClassVar
                from typing_extensions import Self

                M = TypeVar("M", bound=models.Model, covariant=True)

                class BaseQuerySet(models.QuerySet[M]):
                    def example_dict(self) -> Dict[str, Self]: ...

                class MyQuerySet(BaseQuerySet[M]):
                    def example_simple(self) -> Self: ...
                    def example_list(self) -> List[Self]: ...
                    def just_int(self) -> int: ...

                class MyModel(models.Model):
                    objects = MyQuerySet.as_manager()  # type: ignore[var-annotated]

                class QuerySetWithoutSelf(models.QuerySet["MyModelWithoutSelf"]):
                    def method(self) -> "QuerySetWithoutSelf":
                        return self

                class MyModelWithoutSelf(models.Model):
                    objects = QuerySetWithoutSelf.as_manager()
-   case: declares_manager_type_like_django
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.ManagerFromMyQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class MyQuerySet(models.QuerySet):
                    ...

                class MyModel(models.Model):
                    objects = MyQuerySet.as_manager()

-   case: includes_django_methods_returning_queryset
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects.none)  # N: Revealed type is "def () -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.all)  # N: Revealed type is "def () -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.filter)  # N: Revealed type is "def (*args: Any, **kwargs: Any) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from typing import TypeVar
                from django.db import models

                M = TypeVar("M", bound=models.Model, covariant=True)

                class MyQuerySet(models.QuerySet[M]):
                    ...

                class MyModel(models.Model):
                    objects = MyQuerySet.as_manager()  # type: ignore[var-annotated]

-   case: model_gets_generated_manager_as_default_manager
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.queryset_method())  # N: Revealed type is "builtins.str"
        reveal_type(MyModel._default_manager)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class ModelQuerySet(models.QuerySet):
                    def queryset_method(self) -> str:
                        return 'hello'

                class MyModel(models.Model):
                    objects = ModelQuerySet.as_manager()

-   case: resolves_name_collision_with_other_module_level_object
    main: |
        from myapp.models import MyModel, ManagerFromModelQuerySet
        reveal_type(ManagerFromModelQuerySet)  # N: Revealed type is "builtins.int"
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet1[myapp.models.MyModel]"
        reveal_type(MyModel._default_manager)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet1[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                ManagerFromModelQuerySet = 1

                class ModelQuerySet(models.QuerySet):
                    ...

                class MyModel(models.Model):
                    objects = ModelQuerySet.as_manager()

-   case: includes_custom_queryset_methods
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects.custom_queryset_method())  # N: Revealed type is "myapp.models.ModelQuerySet"
        reveal_type(MyModel.objects.all().custom_queryset_method())  # N: Revealed type is "myapp.models.ModelQuerySet"
        reveal_type(MyModel.objects.returns_int_sequence())  # N: Revealed type is "typing.Sequence[builtins.int]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from typing import Sequence

                class ModelQuerySet(models.QuerySet["MyModel"]):
                    def custom_queryset_method(self) -> "ModelQuerySet":
                        return self.all()

                    def returns_int_sequence(self) -> Sequence[int]:
                      return [1]

                class MyModel(models.Model):
                    objects = ModelQuerySet.as_manager()

-   case: includes_custom_queryset_methods_on_unions
    main: |
        from myapp.models import MyModel1, MyModel2
        import typing
        kls: typing.Type[typing.Union[MyModel1, MyModel2]] = MyModel1
        reveal_type(kls.objects.custom_queryset_method())  # N: Revealed type is "Union[myapp.models.ModelQuerySet1, myapp.models.ModelQuerySet2]"
        reveal_type(kls.objects.all().custom_queryset_method())  # N: Revealed type is "Union[myapp.models.ModelQuerySet1, myapp.models.ModelQuerySet2]"
        reveal_type(kls.objects.returns_thing())  # N: Revealed type is "Union[builtins.int, builtins.str]"
        reveal_type(kls.objects.get())  # N: Revealed type is "Union[myapp.models.MyModel1, myapp.models.MyModel2]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from typing import Sequence

                class ModelQuerySet1(models.QuerySet["MyModel1"]):
                    def custom_queryset_method(self) -> "ModelQuerySet1":
                        return self.all()

                    def returns_thing(self) -> int:
                      return 1

                class ModelQuerySet2(models.QuerySet["MyModel2"]):
                    def custom_queryset_method(self) -> "ModelQuerySet2":
                        return self.all()

                    def returns_thing(self) -> str:
                      return "asdf"

                class MyModel1(models.Model):
                    objects = ModelQuerySet1.as_manager()

                class MyModel2(models.Model):
                    objects = ModelQuerySet2.as_manager()

-   case: handles_call_outside_of_model_class_definition
    main: |
        from myapp.models import MyModel, MyModelManager
        reveal_type(MyModelManager)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet[Any]"
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.all())  # N: Revealed type is "myapp.models.ModelQuerySet"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class ModelQuerySet(models.QuerySet["MyModel"]):
                    ...

                MyModelManager = ModelQuerySet.as_manager()
                class MyModel(models.Model):
                    objects = MyModelManager

-   case: handles_name_collision_when_declared_outside_of_model_class_body
    main: |
        from myapp.models import MyModel, ManagerFromModelQuerySet
        reveal_type(ManagerFromModelQuerySet)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet1[Any]"
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet1[myapp.models.MyModel]"
        reveal_type(MyModel.objects.all())  # N: Revealed type is "myapp.models.ModelQuerySet"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class ModelQuerySet(models.QuerySet["MyModel"]):
                    ...

                ManagerFromModelQuerySet = ModelQuerySet.as_manager()
                class MyModel(models.Model):
                    objects = ManagerFromModelQuerySet

-   case: handles_type_var_in_subclasses_of_subclasses_of_queryset
    main: |
        from myapp.models import MyModel, MyOtherModel
        reveal_type(MyModel.objects.example_2())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel.objects.example())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel.objects.example_2())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel.objects.override())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel.objects.override2())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel.objects.dummy_override())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel.objects.example_mixin(MyModel()))  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel.objects.example_other_mixin())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyOtherModel.objects.example())  # N: Revealed type is "myapp.models.MyOtherModel"
        reveal_type(MyOtherModel.objects.example_2())  # N: Revealed type is "myapp.models.MyOtherModel"
        reveal_type(MyOtherModel.objects.override())  # N: Revealed type is "myapp.models.MyOtherModel"
        reveal_type(MyOtherModel.objects.override2())  # N: Revealed type is "myapp.models.MyOtherModel"
        reveal_type(MyOtherModel.objects.dummy_override())  # N: Revealed type is "myapp.models.MyOtherModel"
        reveal_type(MyOtherModel.objects.example_mixin(MyOtherModel()))  # N: Revealed type is "myapp.models.MyOtherModel"
        reveal_type(MyOtherModel.objects.example_other_mixin())  # N: Revealed type is "myapp.models.MyOtherModel"
        reveal_type(MyOtherModel.objects.test_self())  # N: Revealed type is "myapp.models._MyModelQuerySet2[myapp.models.MyOtherModel]"
        reveal_type(MyOtherModel.objects.test_sub_self())  # N: Revealed type is "myapp.models._MyModelQuerySet2[myapp.models.MyOtherModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
              from typing import TypeVar, Generic
              from django.db import models
              from typing_extensions import Self

              T = TypeVar("T", bound=models.Model)
              T_2 = TypeVar("T_2", bound=models.Model)

              class SomeMixin:
                  def example_mixin(self, a: T) -> T: ...

              class OtherMixin(models.QuerySet[T]):
                  def example_other_mixin(self) -> T: ...

              class _MyModelQuerySet(OtherMixin[T], models.QuerySet[T], Generic[T]):
                  def example(self) -> T: ...
                  def override(self) -> T: ...
                  def override2(self) -> T: ...
                  def dummy_override(self) -> int: ...
                  def test_sub_self(self) -> Self: ...

              class _MyModelQuerySet2(SomeMixin, _MyModelQuerySet[T_2]):
                  def example_2(self) -> T_2: ...
                  def override(self) -> T_2: ...
                  def override2(self) -> T_2: ...
                  def dummy_override(self) -> T_2: ...  # type: ignore[override]
                  def test_self(self) -> Self: ...

              class MyModelQuerySet(_MyModelQuerySet2["MyModel"]):
                  def override(self) -> "MyModel": ...

              class MyModel(models.Model):
                  objects = MyModelQuerySet.as_manager()

              class MyOtherModel(models.Model):
                  objects = _MyModelQuerySet2.as_manager()  # type: ignore

-   case: handles_type_vars
    main: |
        from myapp.models import MyModel, BaseQuerySet
        reveal_type(MyModel.objects.example())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel.objects.example_list())  # N: Revealed type is "builtins.list[myapp.models.MyModel]"
        reveal_type(MyModel.objects.example_type())  # N: Revealed type is "Type[myapp.models.MyModel]"
        reveal_type(MyModel.objects.example_tuple_simple())  # N: Revealed type is "Tuple[myapp.models.MyModel]"
        reveal_type(MyModel.objects.example_tuple_list())  # N: Revealed type is "builtins.tuple[myapp.models.MyModel, ...]"
        reveal_type(MyModel.objects.example_tuple_double())  # N: Revealed type is "Tuple[builtins.int, myapp.models.MyModel]"
        reveal_type(MyModel.objects.example_class())  # N: Revealed type is "myapp.models.Example[myapp.models.MyModel]"
        reveal_type(MyModel.objects.example_type_class())  # N: Revealed type is "Type[myapp.models.Example[myapp.models.MyModel]]"
        reveal_type(MyModel.objects.example_collection())  # N: Revealed type is "typing.Collection[myapp.models.MyModel]"
        reveal_type(MyModel.objects.example_set())  # N: Revealed type is "builtins.set[myapp.models.MyModel]"
        reveal_type(MyModel.objects.example_dict())  # N: Revealed type is "builtins.dict[builtins.str, myapp.models.MyModel]"
        reveal_type(MyModel.objects.example_list_dict())  # N: Revealed type is "builtins.list[builtins.dict[builtins.str, myapp.models.MyModel]]"
        class TestQuerySet(BaseQuerySet[str]): ... # E: Type argument "str" of "BaseQuerySet" must be a subtype of "Model"  [type-var]
        reveal_type(MyModel.objects.example_t(5))  # N: Revealed type is "builtins.int"
        MyModel.objects.example_arg(5, "5")  # E: Argument 1 to "example_arg" of "BaseQuerySet" has incompatible type "int"; expected "MyModel"  [arg-type]
        reveal_type(MyModel.objects.example_arg(MyModel(), "5"))  # N: Revealed type is "myapp.models.MyModel"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from __future__ import annotations
                from typing import TypeVar, Generic, Collection

                from django.db import models

                _CTE = TypeVar("_CTE", bound=models.Model)
                T = TypeVar("T")

                class Example(Generic[_CTE]): ...

                class BaseQuerySet(models.QuerySet[_CTE], Generic[_CTE]):

                    def example(self) -> _CTE: ...
                    def example_list(self) -> list[_CTE]: ...
                    def example_type(self) -> type[_CTE]: ...
                    def example_tuple_simple(self) -> tuple[_CTE]: ...
                    def example_tuple_list(self) -> tuple[_CTE, ...]: ...
                    def example_tuple_double(self) -> tuple[int, _CTE]: ...
                    def example_class(self) -> Example[_CTE]: ...
                    def example_type_class(self) -> type[Example[_CTE]]: ...
                    def example_collection(self) -> Collection[_CTE]: ...
                    def example_set(self) -> set[_CTE]: ...
                    def example_dict(self) -> dict[str, _CTE]: ...
                    def example_list_dict(self) -> list[dict[str, _CTE]]: ...
                    def example_t(self, a: T) -> T: ...
                    def example_arg(self, a: _CTE, b: str) -> _CTE: ...


                class MyModelQuerySet(BaseQuerySet["MyModel"]):
                    ...

                class MyModel(models.Model):
                    objects = MyModelQuerySet.as_manager()

-   case: reuses_generated_type_when_called_identically_for_multiple_managers
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects_1)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects_2)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects_1.all())  # N: Revealed type is "myapp.models.ModelQuerySet"
        reveal_type(MyModel.objects_2.all())  # N: Revealed type is "myapp.models.ModelQuerySet"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class ModelQuerySet(models.QuerySet["MyModel"]):
                    ...

                class MyModel(models.Model):
                    objects_1 = ModelQuerySet.as_manager()
                    objects_2 = ModelQuerySet.as_manager()

-   case: generates_new_manager_class_when_name_colliding_with_explicit_manager
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet1[myapp.models.MyModel]"
        reveal_type(MyModel.objects.custom_method())  # N: Revealed type is "builtins.int"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class ManagerFromModelQuerySet(models.Manager):
                    ...

                class ModelQuerySet(models.QuerySet["MyModel"]):
                    def custom_method(self) -> int:
                        return 1

                class MyModel(models.Model):
                    objects = ModelQuerySet.as_manager()

-   case: handles_type_collision_with_from_queryset
    main: |
        from myapp.models import MyModel, FromQuerySet
        reveal_type(FromQuerySet)  # N: Revealed type is "def [_T <: django.db.models.base.Model] () -> myapp.models.ManagerFromModelQuerySet[_T`1]"
        reveal_type(MyModel.from_queryset)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.as_manager)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class ModelQuerySet(models.QuerySet["MyModel"]):
                    ...

                FromQuerySet = models.Manager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    from_queryset = FromQuerySet()
                    as_manager = ModelQuerySet.as_manager()

-   case: nested_queryset_class_definition
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.ManagerFromMyQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class MyModel(models.Model):
                    class MyQuerySet(models.QuerySet):
                        pass
                    objects = MyQuerySet.as_manager()
