-   case: from_queryset_with_base_manager
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is "myapp.models.NewManager[myapp.models.MyModel]"
        reveal_type(MyModel().objects.get())  # N: Revealed type is "myapp.models.MyModel*"
        reveal_type(MyModel().objects.queryset_method())  # N: Revealed type is "builtins.str"
        reveal_type(MyModel.objects.filter(id=1).queryset_method()) # N: Revealed type is "builtins.str"
        reveal_type(MyModel.objects.filter(id=1)) # N: Revealed type is "myapp.models.ModelQuerySet[myapp.models.MyModel*]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from django.db.models.manager import BaseManager

                class ModelQuerySet(models.QuerySet):
                    def queryset_method(self) -> str:
                        return 'hello'
                NewManager = BaseManager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_queryset_imported_from_other_module
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.NewManager[myapp.models.MyModel]"
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.NewManager[myapp.models.MyModel]"
        reveal_type(MyModel.objects.get())  # N: Revealed type is "myapp.models.MyModel*"
        reveal_type(MyModel.objects.queryset_method())  # N: Revealed type is "myapp.querysets.ModelQuerySet"
        reveal_type(MyModel.objects.queryset_method_2())  # N: Revealed type is "typing.Iterable[myapp.querysets.Custom]"
        reveal_type(MyModel.objects.queryset_method_3())  # N: Revealed type is "builtins.str"
        reveal_type(MyModel.objects.queryset_method_4([]))  # N: Revealed type is "None"
        reveal_type(MyModel.objects.filter(id=1).queryset_method()) # N: Revealed type is "myapp.querysets.ModelQuerySet"
        reveal_type(MyModel.objects.filter(id=1)) # N: Revealed type is "myapp.querysets.ModelQuerySet[myapp.models.MyModel*]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/querysets.py
            content: |
                from typing import TYPE_CHECKING, Iterable, Sequence
                from django.db import models
                if TYPE_CHECKING:
                    from .models import MyModel

                class Custom:
                    ...

                class ModelQuerySet(models.QuerySet["MyModel"]):
                    def queryset_method(self) -> "ModelQuerySet":
                        return self.filter()

                    def queryset_method_2(self) -> Iterable[Custom]:
                        return []

                    def queryset_method_3(self) -> str:
                        return 'hello'

                    def queryset_method_4(self, arg: Sequence) -> None:
                        return None

        -   path: myapp/models.py
            content: |
                from django.db import models
                from django.db.models.manager import BaseManager
                from .querysets import ModelQuerySet

                NewManager = BaseManager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_with_manager
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is "myapp.models.NewManager[myapp.models.MyModel]"
        reveal_type(MyModel().objects.get())  # N: Revealed type is "myapp.models.MyModel*"
        reveal_type(MyModel().objects.queryset_method())  # N: Revealed type is "builtins.str"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class ModelQuerySet(models.QuerySet):
                    def queryset_method(self) -> str:
                        return 'hello'

                NewManager = models.Manager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_returns_intersection_of_manager_and_queryset
    main: |
        from myapp.models import MyModel, NewManager
        reveal_type(NewManager())  # N: Revealed type is "myapp.models.NewManager"
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.NewManager[myapp.models.MyModel]"
        reveal_type(MyModel.objects.get())  # N: Revealed type is "Any"
        reveal_type(MyModel.objects.manager_only_method())  # N: Revealed type is "builtins.int"
        reveal_type(MyModel.objects.manager_and_queryset_method())  # N: Revealed type is "builtins.str"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class ModelBaseManager(models.Manager):
                    def manager_only_method(self) -> int:
                        return 1
                class ModelQuerySet(models.QuerySet):
                    def manager_and_queryset_method(self) -> str:
                        return 'hello'

                NewManager = ModelBaseManager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_with_class_name_provided
    main: |
        from myapp.models import MyModel, NewManager
        reveal_type(NewManager())  # N: Revealed type is "myapp.models.NewManager"
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.NewManager[myapp.models.MyModel]"
        reveal_type(MyModel.objects.get())  # N: Revealed type is "Any"
        reveal_type(MyModel.objects.manager_only_method())  # N: Revealed type is "builtins.int"
        reveal_type(MyModel.objects.manager_and_queryset_method())  # N: Revealed type is "builtins.str"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class ModelBaseManager(models.Manager):
                    def manager_only_method(self) -> int:
                        return 1
                class ModelQuerySet(models.QuerySet):
                    def manager_and_queryset_method(self) -> str:
                        return 'hello'

                NewManager = ModelBaseManager.from_queryset(ModelQuerySet, class_name='NewManager')
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_with_class_inheritance
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is "myapp.models.NewManager[myapp.models.MyModel]"
        reveal_type(MyModel().objects.get())  # N: Revealed type is "myapp.models.MyModel*"
        reveal_type(MyModel().objects.queryset_method())  # N: Revealed type is "builtins.str"
    installed_apps:
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models
              from django.db.models.manager import BaseManager
              class BaseQuerySet(models.QuerySet):
                  def queryset_method(self) -> str:
                      return 'hello'
              class ModelQuerySet(BaseQuerySet):
                  pass

              NewManager = BaseManager.from_queryset(ModelQuerySet)
              class MyModel(models.Model):
                  objects = NewManager()

-   case: from_queryset_with_manager_in_another_directory_and_imports
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is "myapp.managers.NewManager[myapp.models.MyModel]"
        reveal_type(MyModel().objects.get())  # N: Revealed type is "myapp.models.MyModel*"
        reveal_type(MyModel().objects.queryset_method)  # N: Revealed type is "def (param: Union[builtins.str, None] =) -> Union[builtins.str, None]"
        reveal_type(MyModel().objects.queryset_method('str'))  # N: Revealed type is "Union[builtins.str, None]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from myapp.managers import NewManager

                class MyModel(models.Model):
                    objects = NewManager()
        -   path: myapp/managers.py
            content: |
                from typing import Optional
                from django.db import models

                class ModelQuerySet(models.QuerySet):
                    def queryset_method(self, param: Optional[str] = None) -> Optional[str]:
                        return param

                NewManager = models.Manager.from_queryset(ModelQuerySet)

-   case: from_queryset_with_inherited_manager_and_typing_no_return
    disable_cache: true
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is "myapp.managers.NewManager[myapp.models.MyModel]"
        reveal_type(MyModel().objects.get())  # N: Revealed type is "myapp.models.MyModel*"
        reveal_type(MyModel().objects.base_queryset_method)  # N: Revealed type is "def (param: Union[builtins.int, builtins.str]) -> <nothing>"
        reveal_type(MyModel().objects.base_queryset_method(2))  # N: Revealed type is "<nothing>"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from myapp.managers import NewManager
                class MyModel(models.Model):
                    objects = NewManager()
        -   path: myapp/managers.py
            content: |
                from django.db import models
                from myapp.base_queryset import BaseQuerySet
                class ModelQuerySet(BaseQuerySet):
                    pass
                NewManager = models.Manager.from_queryset(ModelQuerySet)
        -   path: myapp/base_queryset.py
            content: |
                from typing import NoReturn, Union
                from django.db import models
                class BaseQuerySet(models.QuerySet):
                    def base_queryset_method(self, param: Union[int, str]) -> NoReturn:
                        raise ValueError

-   case: from_queryset_with_decorated_queryset_methods
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is "myapp.models.NewManager[myapp.models.MyModel]"
        reveal_type(MyModel().objects.queryset_method())  # N: Revealed type is "builtins.str"
        reveal_type(MyModel.objects.queryset_method_2())  # N: Revealed type is "builtins.int"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models, transaction

                class ModelQuerySet(models.QuerySet):
                    @transaction.atomic
                    def queryset_method(self) -> str:
                        return 'hello'

                    @transaction.atomic
                    @transaction.atomic
                    def queryset_method_2(self) -> int:
                        return 2

                NewManager = models.Manager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_model_gets_generated_manager_as_default_manager
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.NewManager[myapp.models.MyModel]"
        reveal_type(MyModel.objects.queryset_method())  # N: Revealed type is "builtins.str"
        reveal_type(MyModel._default_manager)  # N: Revealed type is "myapp.models.NewManager[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class ModelQuerySet(models.QuerySet):
                    def queryset_method(self) -> str:
                        return 'hello'

                NewManager = models.Manager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_can_resolve_explicit_any_methods
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.NewManager[myapp.models.MyModel]"
        reveal_type(MyModel.objects.queryset_method(1))  # N: Revealed type is "Any"
        reveal_type(MyModel.objects.queryset_method)  # N: Revealed type is "def (qarg: Any) -> Any"
        reveal_type(MyModel.objects.manager_method(2))  # N: Revealed type is "Any"
        reveal_type(MyModel.objects.manager_method)  # N: Revealed type is "def (marg: Any) -> Any"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from typing import Any

                class ModelQuerySet(models.QuerySet):
                    def queryset_method(self, qarg: Any) -> Any:
                        return 'hello'

                class MyManager(models.Manager):
                    def manager_method(self, marg: Any) -> Any:
                        return 'hello'

                NewManager = MyManager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_in_model_class_body_yields_message
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.base_manager)  # N: Revealed type is "myapp.models.BaseManagerFromMyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.manager)  # N: Revealed type is "myapp.models.ManagerFromMyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.custom_manager)  # N: Revealed type is "myapp.models.MyManagerFromMyQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from django.db.models.manager import BaseManager

                class MyQuerySet(models.QuerySet["MyModel"]):
                    def queryset_method(self) -> int:
                        return 1

                class MyManager(BaseManager):
                    ...

                BaseManagerFromMyQuerySet = BaseManager.from_queryset(MyQuerySet)
                ManagerFromMyQuerySet = models.Manager.from_queryset(MyQuerySet)
                MyManagerFromMyQuerySet = MyManager.from_queryset(MyQuerySet)
                class MyModel(models.Model):
                    objects1 = BaseManager.from_queryset(MyQuerySet)()  # E: `.from_queryset` called from inside model class body
                    objects2 = BaseManager.from_queryset(MyQuerySet)  # E: `.from_queryset` called from inside model class body
                    objects3 = models.Manager.from_queryset(MyQuerySet)()  # E: `.from_queryset` called from inside model class body
                    objects4 = models.Manager.from_queryset(MyQuerySet)  # E: `.from_queryset` called from inside model class body
                    objects5 = MyManager.from_queryset(MyQuerySet)  # E: `.from_queryset` called from inside model class body
                    objects6 = MyManager.from_queryset(MyQuerySet)()  # E: `.from_queryset` called from inside model class body
                    # Initiating the manager type is fine
                    base_manager = BaseManagerFromMyQuerySet()
                    manager = ManagerFromMyQuerySet()
                    custom_manager = MyManagerFromMyQuerySet()
