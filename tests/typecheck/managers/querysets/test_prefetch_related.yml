-   case: prefetch_related_to_attr
    installed_apps:
        - myapp
    main: |
        from myapp.models import Article, Tag
        from django.db.models import Prefetch, F, QuerySet
        from django.db import models
        from typing_extensions import Literal, TypedDict
        from django_stubs_ext import WithAnnotations

        ### Noop (to_attr not provided)
        reveal_type(Article.objects.prefetch_related(Prefetch("tags")).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article, myapp.models.Article]"
        reveal_type(Article.objects.prefetch_related(Prefetch("tags", Tag.objects.all())).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article, myapp.models.Article]"
        reveal_type(Prefetch("tags")) # N: Revealed type is "django.db.models.query.Prefetch[django.db.models.query.QuerySet[django.db.models.base.Model, django.db.models.base.Model], builtins.str]"
        reveal_type(Prefetch("tags", Tag.objects.all())) # N: Revealed type is "django.db.models.query.Prefetch[django.db.models.query.QuerySet[myapp.models.Tag, myapp.models.Tag], builtins.str]"

        # Prefetch created in a function with no to_attr
        def get_prefetch_no_to_attr() -> Prefetch[QuerySet[Tag]]:
            return Prefetch("tags", Tag.objects.all())

        reveal_type(Article.objects.prefetch_related(get_prefetch_no_to_attr()).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article, myapp.models.Article]"

        # Prefetch created in a function with no to_attr and no queryset
        def get_prefetch_no_to_attr_no_qs() -> Prefetch:
            return Prefetch("tags")

        reveal_type(Article.objects.prefetch_related(get_prefetch_no_to_attr_no_qs()).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article, myapp.models.Article]"

        # On the QuerySet
        article_qs = Article.objects.all().prefetch_related(Prefetch("tags", Tag.objects.all(), to_attr="every_tags"))
        reveal_type(article_qs) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})]]"
        reveal_type(article_qs.get().every_tags) # N: Revealed type is "builtins.list[myapp.models.Tag]"
        reveal_type(
            Tag.objects.all().prefetch_related( # N: Revealed type is "builtins.list[myapp.models.Article]"
                Prefetch("article_set", Article.objects.all(), to_attr="every_articles")
            ).get().every_articles
        )

        # On the Manager
        reveal_type(
            Article.objects.prefetch_related( # N: Revealed type is "builtins.list[myapp.models.Tag]"
                Prefetch("tags", Tag.objects.all(), to_attr="every_tags")
            ).get().every_tags
        )
        reveal_type(
            Tag.objects.prefetch_related( # N: Revealed type is "builtins.list[myapp.models.Article]"
                Prefetch("article_set", Article.objects.all(), to_attr="every_articles")
            ).get().every_articles
        )

        # Member expr
        reveal_type(
            Article.objects.prefetch_related( # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})]]"
                models.Prefetch("tags", Tag.objects.all(), to_attr="every_tags")
            ).all()
        )
        # pos args only
        reveal_type(
            Article.objects.prefetch_related( # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})]]"
                models.Prefetch("tags", Tag.objects.all(), "every_tags")
            ).all()
        )

        # Multiple Prefetch items: both `to_attr` annotations should be present
        multi_qs = Article.objects.all().prefetch_related(
            Prefetch("tags", Tag.objects.all(), to_attr="ts"),
            Prefetch("tags", Tag.objects.all(), to_attr="ts2"),
        )
        reveal_type(multi_qs) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'ts': builtins.list[myapp.models.Tag], 'ts2': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'ts': builtins.list[myapp.models.Tag], 'ts2': builtins.list[myapp.models.Tag]})]]"
        reveal_type(multi_qs.get().ts) # N: Revealed type is "builtins.list[myapp.models.Tag]"
        reveal_type(multi_qs.get().ts2) # N: Revealed type is "builtins.list[myapp.models.Tag]"

        # Mixed inline `Prefetch` and plain lookup string in one call; string should be ignored
        mixed_plain = Article.objects.prefetch_related(
            "article_set",
            Prefetch("article_set", Article.objects.all(), to_attr="arts3"),
        )
        reveal_type(mixed_plain) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'arts3': builtins.list[myapp.models.Article]})], myapp.models.Article@AnnotatedWith[TypedDict({'arts3': builtins.list[myapp.models.Article]})]]"

        # Intermediary variable -- function scope
        def foo() -> None:
            tag_prefetch = Prefetch("tags", Tag.objects.all(), to_attr="every_tags")
            reveal_type(Article.objects.prefetch_related(tag_prefetch).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})]]"

        # Intermediary variable -- module scope
        tag_prefetch = Prefetch("tags", Tag.objects.all(), to_attr="every_tags")
        reveal_type(Article.objects.prefetch_related(tag_prefetch).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})]]"

        # Prefetch created in a function
        def get_invalid_prefetch() -> Prefetch[QuerySet[Tag], Literal["every_tags"]]:
            return Prefetch("tags", Tag.objects.all(), to_attr="foo") # E: Incompatible return value type (got "Prefetch[QuerySet[Tag, Tag], Literal['foo']]", expected "Prefetch[QuerySet[Tag, Tag], Literal['every_tags']]")  [return-value] # E: Argument "to_attr" to "Prefetch" has incompatible type "Literal['foo']"; expected "Literal['every_tags'] | None"  [arg-type]

        def get_prefetch() -> Prefetch[QuerySet[Tag], Literal["every_tags"]]:
            return Prefetch("tags", Tag.objects.all(), to_attr="every_tags")

        reveal_type(Article.objects.prefetch_related(get_prefetch()).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})]]"

        # Prefetch created in a function with to_attr as an intermediary variable
        def get_prefetch_with_var() -> Prefetch[QuerySet[Tag], Literal["every_tags"]]:
            to_attr = "every_tags" # TODO: RM error next line
            return Prefetch("tags", Tag.objects.all(), to_attr) # E: Argument 3 to "Prefetch" has incompatible type "str"; expected "Literal['every_tags'] | None"  [arg-type]

        reveal_type(Article.objects.prefetch_related(get_prefetch_with_var()).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})]]"

        # Mixed inline `Prefetch` and variable `Prefetch` in one call
        mixed_qs = Article.objects.prefetch_related(
            tag_prefetch,
            Prefetch("article_set", Article.objects.all(), to_attr="arts2"),
        )
        reveal_type(mixed_qs) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag], 'arts2': builtins.list[myapp.models.Article]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag], 'arts2': builtins.list[myapp.models.Article]})]]"

        # Prefetch with `to_attr` arg but without the `queryset` arg
        reveal_type(Article.objects.prefetch_related(models.Prefetch("tags", to_attr="just_tags")).get().just_tags) # N: Revealed type is "builtins.list[myapp.models.Tag]"

        # Prefetch with annotated `queryset`
        reveal_type(Article.objects.prefetch_related( # N: Revealed type is "builtins.list[myapp.models.Tag@AnnotatedWith[TypedDict({'foo': Any})]]"
            models.Prefetch("tags", Tag.objects.annotate(foo=F("id")).all(), to_attr="just_tags")).get().just_tags
        )

        class MyDict(TypedDict):
            foo: str

        def get_prefetch_with_annotations() -> Prefetch[QuerySet[WithAnnotations[Tag, MyDict]], Literal["every_tags"]]:
            return Prefetch("tags", Tag.objects.annotate(foo=F("id")), "every_tags")

        reveal_type(Article.objects.prefetch_related(get_prefetch_with_annotations()).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag@AnnotatedWith[TypedDict('main.MyDict', {'foo': builtins.str})]]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag@AnnotatedWith[TypedDict('main.MyDict', {'foo': builtins.str})]]})]]"
        reveal_type(Article.objects.prefetch_related(get_prefetch_with_annotations()).get().every_tags[0].foo) # N: Revealed type is "builtins.str"

        # *args prefetch
        first_prefetch = Prefetch("tags", Tag.objects.all(), to_attr="every_tags")
        second_prefetch = Prefetch("tags", Tag.objects.all(), to_attr="every_tags2")
        third_prefetch = Prefetch("tags", Tag.objects.all(), to_attr="every_tags3")
        fourth_prefetch = Prefetch("tags", Tag.objects.all(), to_attr="every_tags4")
        prefetch_objs = (first_prefetch, second_prefetch)

        reveal_type(Article.objects.prefetch_related(*prefetch_objs).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag], 'every_tags2': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag], 'every_tags2': builtins.list[myapp.models.Tag]})]]"
        reveal_type(Article.objects.prefetch_related(third_prefetch, *prefetch_objs).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags3': builtins.list[myapp.models.Tag], 'every_tags': builtins.list[myapp.models.Tag], 'every_tags2': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags3': builtins.list[myapp.models.Tag], 'every_tags': builtins.list[myapp.models.Tag], 'every_tags2': builtins.list[myapp.models.Tag]})]]"
        reveal_type(Article.objects.prefetch_related(*prefetch_objs, third_prefetch).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag], 'every_tags2': builtins.list[myapp.models.Tag], 'every_tags3': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag], 'every_tags2': builtins.list[myapp.models.Tag], 'every_tags3': builtins.list[myapp.models.Tag]})]]"
        reveal_type(Article.objects.prefetch_related(fourth_prefetch, *prefetch_objs, third_prefetch).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags4': builtins.list[myapp.models.Tag], 'every_tags': builtins.list[myapp.models.Tag], 'every_tags2': builtins.list[myapp.models.Tag], 'every_tags3': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags4': builtins.list[myapp.models.Tag], 'every_tags': builtins.list[myapp.models.Tag], 'every_tags2': builtins.list[myapp.models.Tag], 'every_tags3': builtins.list[myapp.models.Tag]})]]"

        # *args prefetch from helper function
        def _get_prefetches() -> tuple[
          Prefetch[QuerySet[Tag], Literal["every_tags"]],
          Prefetch[QuerySet[Tag], Literal["every_tags2"]],
        ]:
            return prefetch_objs

        reveal_type(Article.objects.prefetch_related(*_get_prefetches()).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag], 'every_tags2': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag], 'every_tags2': builtins.list[myapp.models.Tag]})]]"

    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class Tag(models.Model): ...
                class Article(models.Model):
                    tags = models.ManyToManyField(to=Tag, related_name="articles", blank=True)

-   case: prefetch_related_and_annotate
    installed_apps:
        - django.contrib.auth
    main: |
        from django.db.models import Prefetch, F
        from django.contrib.auth.models import User, Group

        user = (
            User.objects
            .annotate(annotated_user=F("username"))
            .prefetch_related(Prefetch("groups", Group.objects.all(), to_attr="to_attr_groups"))
            .get()
        )
        reveal_type(user.annotated_user) # N: Revealed type is "Any"
        reveal_type(user.to_attr_groups) # N: Revealed type is "builtins.list[django.contrib.auth.models.Group]"



-   case: prefetch_related_to_attr_conflict_with_annotate
    installed_apps:
        - django.contrib.auth
    main: |
        from django.db.models import Prefetch, F
        from django.contrib.auth.models import User, Group

        # When mixing `.annotate(foo=...)` and `prefetch_related(Prefetch(...,to_attr=foo))`
        # The last annotate in the chain takes precedence (even if it is prior to the prefetch_related)
        annotate_into_prefetch = (
            User.objects # E: Attribute "foo" already defined on "django.contrib.auth.models.User@AnnotatedWith[TypedDict({'foo': Any})]"  [no-redef]
            .annotate(foo=F("username"))
            .prefetch_related(Prefetch("groups", Group.objects.all(), to_attr="foo"))
            .get()
        )
        prefetch_into_annotate = (
            User.objects  # E: Attribute "foo" already defined on "django.contrib.auth.models.User@AnnotatedWith[TypedDict({'foo': builtins.list[django.contrib.auth.models.Group]})]"  [no-redef]
            .prefetch_related(Prefetch("groups", Group.objects.all(), to_attr="foo"))
            .annotate(foo=F("username"))
            .get()
        )


-   case: prefetch_related_to_attr_conflict_with_model_attr
    installed_apps:
        - myapp
    main: |
        from django.db.models import Prefetch, F
        from myapp.models import Article, Tag

        Article.objects.prefetch_related(Prefetch("tags", Tag.objects.all(), to_attr="pk"))  # E: Attribute "pk" already defined on "myapp.models.Article"  [no-redef]
        Article.objects.prefetch_related(Prefetch("tags", Tag.objects.all(), to_attr="id"))  # E: Attribute "id" already defined on "myapp.models.Article"  [no-redef]
        Article.objects.prefetch_related(Prefetch("tags", Tag.objects.all(), to_attr="tags"))  # E: Attribute "tags" already defined on "myapp.models.Article"  [no-redef]
        Article.objects.prefetch_related(Prefetch("tags", Tag.objects.all(), to_attr="my_property"))  # E: Attribute "my_property" already defined on "myapp.models.Article"  [no-redef]
        Article.objects.prefetch_related(Prefetch("tags", Tag.objects.all(), to_attr="my_method"))  # E: Attribute "my_method" already defined on "myapp.models.Article"  [no-redef]
        Article.objects.prefetch_related(Prefetch("tags", Tag.objects.all(), to_attr="my_classmethod"))  # E: Attribute "my_classmethod" already defined on "myapp.models.Article"  [no-redef]
        Article.objects.prefetch_related(Prefetch("tags", Tag.objects.all(), to_attr="my_staticmethod"))  # E: Attribute "my_staticmethod" already defined on "myapp.models.Article"  [no-redef]

        Tag.objects.prefetch_related(Prefetch("articles", Article.objects.all(), to_attr="articles"))  # E: Attribute "articles" already defined on "myapp.models.Tag"  [no-redef]

    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class Tag(models.Model): ...
                class Article(models.Model):
                    tags = models.ManyToManyField(to=Tag, related_name="articles", blank=True)

                    @property
                    def my_property(self) -> int: ...

                    def my_method(self) -> int: ...

                    @staticmethod
                    def my_staticmethod() -> int: ...

                    @classmethod
                    def my_classmethod(cls) -> int:  ...

-   case: raw_queryset_prefetch_related_signatures
    main: |
        from myapp.models import Person, Book
        from django.db.models import Prefetch

        raw_qs = Book.objects.raw("SELECT 1")
        reveal_type(raw_qs.prefetch_related())  # N: Revealed type is "django.db.models.query.RawQuerySet[myapp.models.Book]"
        reveal_type(raw_qs.prefetch_related(None))  # N: Revealed type is "django.db.models.query.RawQuerySet[myapp.models.Book]"
        reveal_type(raw_qs.prefetch_related("author"))  # N: Revealed type is "django.db.models.query.RawQuerySet[myapp.models.Book]"
        reveal_type(raw_qs.prefetch_related(Prefetch("author")))  # N: Revealed type is "django.db.models.query.RawQuerySet[myapp.models.Book]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class Person(models.Model): ...
                class Book(models.Model):
                    author = models.ForeignKey(Person, on_delete=models.CASCADE)

-   case: prefetch_related_conflicting_prefetches_on_same_attr
    installed_apps:
        - django.contrib.auth
    main: |
        from django.db.models import Prefetch
        from django.contrib.auth.models import User, Group

        User.objects.prefetch_related( # E: Attribute "new_attr" already defined on "django.contrib.auth.models.User"  [no-redef]
           Prefetch("groups", Group.objects.filter(name="test"), to_attr="new_attr"),
           Prefetch("groups", Group.objects.all(), to_attr="new_attr"),
        )
        User.objects.prefetch_related( # E: Attribute "new_attr" already defined on "django.contrib.auth.models.User@AnnotatedWith[TypedDict({'new_attr': builtins.list[django.contrib.auth.models.Group]})]"  [no-redef]
           Prefetch("groups", Group.objects.all(), to_attr="new_attr"),
        ).prefetch_related(
           Prefetch("groups", Group.objects.all(), to_attr="new_attr"),
        )
        User.objects.prefetch_related("groups", Prefetch("groups")) # Ok
        User.objects.prefetch_related("groups", Prefetch("groups", Group.objects.filter(name="test"))) # TODO: Should be Not OK!
        User.objects.prefetch_related(Prefetch("groups", Group.objects.filter(name="test")), "groups") # TODO: Should be Not OK! (but OK at runtime :/)
