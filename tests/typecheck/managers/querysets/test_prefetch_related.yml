-   case: prefetch_related_to_attr
    main: |
        from myapp.models import Article, Tag
        from django.db.models import Prefetch
        from django.db import models

        # Noop (to_attr not provided)
        reveal_type(Article.objects.prefetch_related(Prefetch("tags")).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article, myapp.models.Article]"
        reveal_type(Article.objects.prefetch_related(Prefetch("tags", Tag.objects.all())).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article, myapp.models.Article]"

        # On the QuerySet
        article_qs = Article.objects.all().prefetch_related(Prefetch("tags", Tag.objects.all(), to_attr="every_tags"))
        reveal_type(article_qs) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})]]"
        reveal_type(article_qs.get().every_tags) # N: Revealed type is "builtins.list[myapp.models.Tag]"
        reveal_type(
            Tag.objects.all().prefetch_related( # N: Revealed type is "builtins.list[myapp.models.Article]"
                Prefetch("article_set", Article.objects.all(), to_attr="every_articles")
            ).get().every_articles
        )

        # On the Manager
        reveal_type(
            Article.objects.prefetch_related( # N: Revealed type is "builtins.list[myapp.models.Tag]"
                Prefetch("tags", Tag.objects.all(), to_attr="every_tags")
            ).get().every_tags
        )
        reveal_type(
            Tag.objects.prefetch_related( # N: Revealed type is "builtins.list[myapp.models.Article]"
                Prefetch("article_set", Article.objects.all(), to_attr="every_articles")
            ).get().every_articles
        )

        # Member expr
        reveal_type(
            Article.objects.prefetch_related( # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})]]"
                models.Prefetch("tags", Tag.objects.all(), to_attr="every_tags")
            ).all()
        )
        # pos args only
        reveal_type(
            Article.objects.prefetch_related( # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'every_tags': builtins.list[myapp.models.Tag]})]]"
                models.Prefetch("tags", Tag.objects.all(), "every_tags")
            ).all()
        )

        # Multiple Prefetch items: both `to_attr` annotations should be present
        multi_qs = Article.objects.all().prefetch_related(
            Prefetch("tags", Tag.objects.all(), to_attr="ts"),
            Prefetch("tags", Tag.objects.all(), to_attr="ts2"),
        )
        reveal_type(multi_qs) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'ts': builtins.list[myapp.models.Tag], 'ts2': builtins.list[myapp.models.Tag]})], myapp.models.Article@AnnotatedWith[TypedDict({'ts': builtins.list[myapp.models.Tag], 'ts2': builtins.list[myapp.models.Tag]})]]"
        reveal_type(multi_qs.get().ts) # N: Revealed type is "builtins.list[myapp.models.Tag]"
        reveal_type(multi_qs.get().ts2) # N: Revealed type is "builtins.list[myapp.models.Tag]"

        # Mixed inline `Prefetch` and plain lookup string in one call; string should be ignored
        mixed_plain = Article.objects.prefetch_related(
            "article_set",
            Prefetch("article_set", Article.objects.all(), to_attr="arts3"),
        )
        reveal_type(mixed_plain) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'arts3': builtins.list[myapp.models.Article]})], myapp.models.Article@AnnotatedWith[TypedDict({'arts3': builtins.list[myapp.models.Article]})]]"


        ## Not Supported

        # Prefetch with `to_attr` arg but without the `queryset` arg
        # TODO: We should be able to resolve a more accurate type using existing lookup `resolve_lookup_expected_type` machinery
        reveal_type(Article.objects.prefetch_related(models.Prefetch("tags", to_attr="just_tags")).get().just_tags) # N: Revealed type is "builtins.list[Any]"

        # Intermediary variable -- function scope
        def foo() -> None:
            tag_prefetch = Prefetch("tags", Tag.objects.all(), to_attr="every_tags")
            reveal_type(Article.objects.prefetch_related(tag_prefetch).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article, myapp.models.Article]"

        # Intermediary variable -- module scope
        tag_prefetch = Prefetch("tags", Tag.objects.all(), to_attr="every_tags")
        reveal_type(Article.objects.prefetch_related(tag_prefetch).all()) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article, myapp.models.Article]"

        # Mixed inline `Prefetch` and variable `Prefetch` in one call
        mixed_qs = Article.objects.prefetch_related(
            tag_prefetch,
            Prefetch("article_set", Article.objects.all(), to_attr="arts2"),
        )
        reveal_type(mixed_qs) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Article@AnnotatedWith[TypedDict({'arts2': builtins.list[myapp.models.Article]})], myapp.models.Article@AnnotatedWith[TypedDict({'arts2': builtins.list[myapp.models.Article]})]]"

    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class Tag(models.Model): ...
                class Article(models.Model):
                    tags = models.ManyToManyField(to=Tag, related_name="articles", blank=True)

-   case: prefetch_related_and_annotate
    main: |
        from django.db.models import Prefetch, F
        from django.contrib.auth.models import User, Group

        user = (
            User.objects
            .annotate(annotated_user=F("username"))
            .prefetch_related(Prefetch("groups", Group.objects.all(), to_attr="to_attr_groups"))
            .get()
        )
        reveal_type(user.annotated_user) # N: Revealed type is "Any"
        reveal_type(user.to_attr_groups) # N: Revealed type is "builtins.list[django.contrib.auth.models.Group]"

    installed_apps:
        - django.contrib.auth
