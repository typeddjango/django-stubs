-   case: annotate_using_with_annotations
    main: |
        from typing_extensions import Annotated
        from myapp.models import User
        from django_stubs_ext import WithAnnotations, Annotations
        from django.db.models.expressions import Value
        annotated_user = User.objects.annotate(foo=Value("")).get()

        unannotated_user = User.objects.get(id=1)

        print(annotated_user.asdf) # E: "User@AnnotatedWith[TypedDict({'foo': Any})]" has no attribute "asdf"  [attr-defined]
        print(unannotated_user.asdf) # E: "User" has no attribute "asdf"  [attr-defined]

        def func(user: Annotated[User, Annotations]) -> str:  # E: Missing required TypedDict parameter for generic type Annotations  [misc]
            return user.asdf  # E: "User" has no attribute "asdf"  [attr-defined]

        # Due to the error on 'func' it should fall back to expecting 'User'
        reveal_type(func)  # N: Revealed type is "def (user: myapp.models.User) -> builtins.str"
        func(unannotated_user)
        func(annotated_user)

        def func2(user: WithAnnotations[User]) -> str:
            return user.asdf  # E: "User" has no attribute "asdf"  [attr-defined]

        # With only one argument to 'WithAnnotations' it should fall back to expecting 'User'
        reveal_type(func2)  # N: Revealed type is "def (user: myapp.models.User) -> builtins.str"
        func2(unannotated_user)
        func2(annotated_user)

        def func3(user: WithAnnotations) -> str: ...

        # With no arguments to 'WithAnnotations' it should become 'Any'
        reveal_type(func3)  # N: Revealed type is "def (user: Any) -> builtins.str"
        func3(unannotated_user)
        func3(annotated_user)
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class User(models.Model):
                    username = models.CharField(max_length=100)

-   case: annotate_using_with_annotations_typeddict
    main: |
        from typing import Any
        from typing_extensions import Annotated, TypedDict
        from myapp.models import User
        from django_stubs_ext import WithAnnotations, Annotations
        from django.db.models.expressions import Value

        class MyDict(TypedDict):
            foo: str

        def func(user: Annotated[User, Annotations[MyDict]]) -> str:
            print(user.asdf) # E: "User@AnnotatedWith[MyDict]" has no attribute "asdf"  [attr-defined]
            return user.foo

        unannotated_user = User.objects.get(id=1)
        annotated_user = User.objects.annotate(foo=Value("")).get()
        other_annotated_user = User.objects.annotate(other=Value("")).get()

        func(unannotated_user) # E: Argument 1 to "func" has incompatible type "User"; expected "User@AnnotatedWith[MyDict]"  [arg-type]
        x: WithAnnotations[User]
        # Declaring nothing annotated returns a user
        reveal_type(x)  # N: Revealed type is "myapp.models.User"
        func(x)  # E: Argument 1 to "func" has incompatible type "User"; expected "User@AnnotatedWith[MyDict]"  [arg-type]
        func(annotated_user)
        func(other_annotated_user) # E: Argument 1 to "func" has incompatible type "User@AnnotatedWith[TypedDict({'other': Any})]"; expected "User@AnnotatedWith[MyDict]"  [arg-type]

        def func2(user: WithAnnotations[User, MyDict]) -> str:
            print(user.asdf) # E: "User@AnnotatedWith[MyDict]" has no attribute "asdf"  [attr-defined]
            return user.foo

        func2(unannotated_user) # E: Argument 1 to "func2" has incompatible type "User"; expected "User@AnnotatedWith[MyDict]"  [arg-type]
        func2(annotated_user)
        func2(other_annotated_user) # E: Argument 1 to "func2" has incompatible type "User@AnnotatedWith[TypedDict({'other': Any})]"; expected "User@AnnotatedWith[MyDict]"  [arg-type]
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class User(models.Model):
                    username = models.CharField(max_length=100)

-   case: annotate_using_with_annotations_typeddict_subtypes
    main: |
        from typing_extensions import Annotated, TypedDict
        from myapp.models import User
        from django_stubs_ext import WithAnnotations, Annotations

        class BroadDict(TypedDict):
            foo: str
            bar: str

        class NarrowDict(TypedDict):
            foo: str

        class OtherDict(TypedDict):
            other: str

        def func(user: WithAnnotations[User, NarrowDict]) -> str:
            return user.foo

        x: WithAnnotations[User, NarrowDict]
        func(x)

        y: WithAnnotations[User, BroadDict]
        func(y)

        z: WithAnnotations[User, OtherDict]
        func(z) # E: Argument 1 to "func" has incompatible type "User@AnnotatedWith[OtherDict]"; expected "User@AnnotatedWith[NarrowDict]"  [arg-type]

    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class User(models.Model):
                    username = models.CharField(max_length=100)


-   case: annotate_basic
    main: |
        from myapp.models import User
        from django.db.models.expressions import F

        qs = User.objects.annotate(foo=F('id'))
        reveal_type(qs) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.User@AnnotatedWith[TypedDict({'foo': Any})], myapp.models.User@AnnotatedWith[TypedDict({'foo': Any})]]"

        annotated = qs.get()
        reveal_type(annotated) # N: Revealed type is "myapp.models.User@AnnotatedWith[TypedDict({'foo': Any})]"
        reveal_type(annotated.foo) # N: Revealed type is "Any"
        print(annotated.bar) # E: "User@AnnotatedWith[TypedDict({'foo': Any})]" has no attribute "bar"  [attr-defined]
        reveal_type(annotated.username) # N: Revealed type is "builtins.str"

    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class User(models.Model):
                    username = models.CharField(max_length=100)


-   case: annotate_no_field_name
    main: |
        from myapp.models import User
        from django.db.models import Count

        qs = User.objects.annotate(Count('id'))
        reveal_type(qs) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.User, myapp.models.User]"

    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class User(models.Model):
                    username = models.CharField(max_length=100)

-   case: annotate_model_usage_across_methods
    main: |
        from myapp.models import User, Animal
        from django.db.models import Count

        qs = User.objects.annotate(Count('id'))
        annotated_user = qs.get()

        def animals_only(param: Animal) -> None:
            pass
        # Make sure that the type is still checked when no annotation was produced
        animals_only(annotated_user) # E: Argument 1 to "animals_only" has incompatible type "User"; expected "Animal"  [arg-type]

        def users_allowed(param: User) -> None:
            # But this function accepts only the original User type, so any attr access is not allowed within this function
            param.foo  # E: "User" has no attribute "foo"  [attr-defined]
        # Passing in the annotated User to a function taking a (unannotated) User is OK
        users_allowed(annotated_user)

    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class User(models.Model):
                    username = models.CharField(max_length=100)
                class Animal(models.Model):
                    barks = models.BooleanField()

-   case: annotate_twice_works
    main: |
        from myapp.models import User
        from django.db.models.expressions import F

        # Django annotations are additive
        qs = User.objects.annotate(foo=F('id'))
        qs = qs.annotate(bar=F('id'))
        annotated = qs.get()
        reveal_type(annotated) # N: Revealed type is "myapp.models.User@AnnotatedWith[TypedDict({'foo': Any, 'bar': Any})]"
        reveal_type(annotated.foo) # N: Revealed type is "Any"
        reveal_type(annotated.bar) # N: Revealed type is "Any"
        reveal_type(annotated.username) # N: Revealed type is "builtins.str"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class User(models.Model):
                    username = models.CharField(max_length=100)

-   case: annotate_using_queryset_across_methods
    main: |
        from myapp.models import User
        from django_stubs_ext import WithAnnotations
        from django.db.models import QuerySet
        from django.db.models.expressions import F
        from typing_extensions import TypedDict

        qs = User.objects.filter(id=1)

        class FooDict(TypedDict):
            foo: str

        def add_annotation(qs: QuerySet[User]) -> QuerySet[WithAnnotations[User, FooDict]]:
          return qs.annotate(foo=F('id'))

        def add_wrong_annotation(qs: QuerySet[User]) -> QuerySet[WithAnnotations[User, FooDict]]:
          return qs.annotate(bar=F('id')) # E: Incompatible return value type (got "QuerySet[User@AnnotatedWith[TypedDict({'bar': Any})], User@AnnotatedWith[TypedDict({'bar': Any})]]", expected "QuerySet[User@AnnotatedWith[FooDict], User@AnnotatedWith[FooDict]]")  [return-value]

        qs = add_annotation(qs)
        reveal_type(qs.get().foo)  # N: Revealed type is "builtins.str"
        qs.get().bar # E: "User@AnnotatedWith[FooDict]" has no attribute "bar"  [attr-defined]

    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class User(models.Model):
                    username = models.CharField(max_length=100)


-   case: annotate_currently_allows_lookups_of_non_existent_field
    main: |
        from myapp.models import User
        from django.db.models.expressions import F
        User.objects.annotate(abc=F('id')).filter(abc=1).values_list()
        User.objects.annotate(abc=F('id')).filter(unknown_field=1).values_list()  # E: Cannot resolve keyword 'unknown_field' into field. Choices are: id, abc  [misc]
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class User(models.Model):
                    pass

-   case: annotate_values_or_values_list_before_or_after_annotate_broadens_type
    main: |
        from myapp.models import Blog
        from django.db.models.expressions import F

        values_list_double_annotate = Blog.objects.annotate(foo=F('id')).annotate(bar=F('id')).values_list('foo', 'bar').get()
        reveal_type(values_list_double_annotate)  # N: Revealed type is "Tuple[Any, Any]"

        values_list_named = Blog.objects.annotate(foo=F('id'), bar=F('isad')).values_list('foo', 'text', named=True).get()
        # We have to assume we don't know any of the tuple member types.
        reveal_type(values_list_named)  # N: Revealed type is "Tuple[Any, builtins.str, fallback=main.Row]"
        values_list_named.unknown # E: "Row" has no attribute "unknown"  [attr-defined]
        reveal_type(values_list_named.foo) # N: Revealed type is "Any"
        reveal_type(values_list_named.text) # N: Revealed type is "builtins.str"

        values_list_flat_known = Blog.objects.annotate(foo=F('id')).values_list('text', flat=True).get()
        # Even though it's annotated, we still know the lookup's type.
        reveal_type(values_list_flat_known)  # N: Revealed type is "builtins.str"
        values_list_flat_unknown = Blog.objects.annotate(foo=F('id')).values_list('foo', flat=True).get()
        # We don't know the type of an unknown lookup
        reveal_type(values_list_flat_unknown)  # N: Revealed type is "Any"

        values_no_params = Blog.objects.annotate(foo=F('id')).values().get()
        reveal_type(values_no_params)  # N: Revealed type is "builtins.dict[builtins.str, Any]"

        values_list_no_params = Blog.objects.annotate(foo=F('id')).values_list().get()
        reveal_type(values_list_no_params)  # N: Revealed type is "builtins.tuple[Any, ...]"

        values_list_flat_no_params = Blog.objects.annotate(foo=F('id')).values_list(flat=True).get()
        reveal_type(values_list_flat_no_params)  # N: Revealed type is "builtins.int"

        values_list_named_no_params = Blog.objects.annotate(foo=F('id')).values_list(named=True).get()
        reveal_type(values_list_named_no_params.foo) # N: Revealed type is "Any"
        reveal_type(values_list_named_no_params.text) # N: Revealed type is "builtins.str"

        # .values/.values_list BEFORE .annotate

        # The following should happen to the TypeVars:
        #  1st typevar (Model): Blog => django_stubs_ext.WithAnnotations[Blog]
        #  2nd typevar (Row): Should assume that we don't know what is in the row anymore (due to the annotation)
        # Since we can't trust that only 'text' is in the row type anymore.

        # It's possible to provide more precise types than than this, but without inspecting the
        # arguments to .annotate, these are the best types we can infer.
        qs1 = Blog.objects.values('text').annotate(foo=F('id'))
        reveal_type(qs1) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Blog@AnnotatedWith[TypedDict({'foo': Any})], builtins.dict[builtins.str, Any]]"
        qs2 = Blog.objects.values_list('text').annotate(foo=F('id'))
        reveal_type(qs2) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Blog@AnnotatedWith[TypedDict({'foo': Any})], builtins.tuple[Any, ...]]"
        qs3 = Blog.objects.values_list('text', named=True).annotate(foo=F('id'))
        # TODO: Would be nice to infer a NamedTuple which contains the field 'text' (str) + any number of other fields.
        #  The reason it would have to appear to have any other fields is that annotate could potentially be called with
        #  arbitrary parameters such that we wouldn't know how many extra fields there might be.
        #  But it's not trivial to make such a NamedTuple, partly because since it is also an ordinary tuple, it would
        #  have to have an arbitrary length, but still have certain fields at certain indices with specific types.
        #  For now, Any :)
        reveal_type(qs3) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Blog@AnnotatedWith[TypedDict({'foo': Any})], Any]"
        qs4 = Blog.objects.values_list('text', flat=True).annotate(foo=F('id'))
        reveal_type(qs4) # N: Revealed type is "django.db.models.query.QuerySet[myapp.models.Blog@AnnotatedWith[TypedDict({'foo': Any})], builtins.str]"


        before_values_no_params = Blog.objects.values().annotate(foo=F('id')).get()
        reveal_type(before_values_no_params)  # N: Revealed type is "builtins.dict[builtins.str, Any]"

        before_values_list_no_params = Blog.objects.values_list().annotate(foo=F('id')).get()
        reveal_type(before_values_list_no_params)  # N: Revealed type is "builtins.tuple[Any, ...]"

        before_values_list_flat_no_params = Blog.objects.values_list(flat=True).annotate(foo=F('id')).get()
        reveal_type(before_values_list_flat_no_params)  # N: Revealed type is "builtins.int"

        before_values_list_named_no_params = Blog.objects.values_list(named=True).annotate(foo=F('id')).get()
        reveal_type(before_values_list_named_no_params.foo) # N: Revealed type is "Any"
        # TODO: Would be nice to infer builtins.str:
        reveal_type(before_values_list_named_no_params.text) # N: Revealed type is "Any"

    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class Blog(models.Model):
                    num_posts = models.IntegerField()
                    text = models.CharField(max_length=100)

- case: test_annotate_with_filter
  main: |
    from django.db import models
    from myapp.models import Blog

    qs = Blog.objects.annotate(xyz=models.Count("entry"))
    qs.filter(xyz=1)
    qs.filter(annotate_wrong__gt=5)

    qs2 = qs.alias(alias_entries=models.Count("entry"))
    qs2.filter(alias_wrong__gt=5, annotate_wrong__gt=5)

    Blog.objects.annotate().filter(xyz=1)
    (
        Blog.objects.filter(xyz=1)
        .annotate(xyz=models.Count("entry"))
        .filter(xyz=1)
    )
  out: |
    main:6: error: Cannot resolve keyword 'annotate_wrong' into field. Choices are: entry, id, xyz  [misc]
    main:9: error: Cannot resolve keyword 'alias_wrong' into field. Choices are: entry, id, xyz  [misc]
    main:9: error: Cannot resolve keyword 'annotate_wrong' into field. Choices are: entry, id, xyz  [misc]
    main:11: error: Cannot resolve keyword 'xyz' into field. Choices are: entry, id  [misc]
    main:13: error: Cannot resolve keyword 'xyz' into field. Choices are: entry, id  [misc]
  installed_apps:
    - myapp
  files:
    - path: myapp/__init__.py
    - path: myapp/models.py
      content: |
        from django.db import models

        class Blog(models.Model):
            pass

        class Entry(models.Model):
            blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
