- case: test_admin_decorators_display
  main: |
    from django.db import models

    from django.contrib import admin


    class MyModel(models.Model):
        @admin.display
        def display_bare(self) -> str: ...

        @admin.display(boolean=True, ordering="field", description="Something", empty_value="...")
        def display_fancy(self) -> bool: ...

        # Can also be a property
        @property
        @admin.display
        def display_property(self) -> str: ...

        @admin.display  # E: Decorators on top of @property are not supported
        @property
        def incorrect_property(self) -> str: ...

        def method(self) -> None:
            reveal_type(self.display_bare)  # N: Revealed type is "def () -> builtins.str"
            reveal_type(self.display_fancy)  # N: Revealed type is "def () -> builtins.bool"
            reveal_type(self.display_fancy())  # N: Revealed type is "builtins.bool"
            reveal_type(self.display_property)  # N: Revealed type is "builtins.str"


    @admin.display
    def freestanding_display_bare(obj: MyModel) -> str: ...


    @admin.display(boolean=True)
    def freestanding_display_fancy(obj: MyModel) -> bool: ...


    @admin.register(MyModel, MyModel, site=None)
    class MyModelAdmin(admin.ModelAdmin[MyModel]):
        list_display = [
            "display_property",
            "display_fancy",
            "display_bare",
            "admin_display_bare",
            "admin_display_fancy",
            freestanding_display_bare,
            freestanding_display_fancy,
        ]

        @admin.display
        def admin_display_bare(self, obj: MyModel) -> str: ...

        @admin.display(boolean=True, ordering="field", description="Something", empty_value="Nuf")
        def admin_display_fancy(self, obj: MyModel) -> bool: ...

- case: test_admin_decorators_action
  main: |
    from django.db import models

    from django.contrib import admin
    from django.db.models import QuerySet
    from django.http import HttpRequest


    class MyModel(models.Model): ...


    @admin.action
    def freestanding_action_bare(modeladmin: "MyModelAdmin", request: HttpRequest, queryset: QuerySet[MyModel]) -> None: ...


    @admin.action(description="Some text here", permissions=["test"])
    def freestanding_action_fancy(modeladmin: "MyModelAdmin", request: HttpRequest, queryset: QuerySet[MyModel]) -> None: ...


    @admin.register(MyModel)
    class MyModelAdmin(admin.ModelAdmin[MyModel]):
        actions = [freestanding_action_bare, freestanding_action_fancy, "method_action_bare", "method_action_fancy"]

        @admin.action
        def method_action_bare(self, request: HttpRequest, queryset: QuerySet[MyModel]) -> None: ...

        @admin.action(description="Some text here", permissions=["test"])
        def method_action_fancy(self, request: HttpRequest, queryset: QuerySet[MyModel]) -> None: ...

        def method(self) -> None:
            reveal_type(self.method_action_bare)  # N: Revealed type is "def (django.http.request.HttpRequest, django.db.models.query._QuerySet[main.MyModel, main.MyModel])"
            reveal_type(self.method_action_fancy)  # N: Revealed type is "def (django.http.request.HttpRequest, django.db.models.query._QuerySet[main.MyModel, main.MyModel])"
