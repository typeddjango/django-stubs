from collections.abc import Iterator
from typing import IO, Any, AnyStr, Generic, Iterable

from django.utils._os import _PathCompatible

def validate_file_name(name: _PathCompatible, allow_relative_path: bool = ...) -> _PathCompatible: ...

class FileProxyMixin(Generic[AnyStr]):
    file: IO[AnyStr] | None
    @property
    def encoding(self: FileProxyMixin[str]) -> str: ...
    def fileno(self) -> int: ...
    def flush(self) -> None: ...
    def isatty(self) -> bool: ...
    @property
    def newlines(self: FileProxyMixin[str]) -> Any: ...
    def read(self) -> AnyStr: ...
    readinto: Any
    def readline(self) -> AnyStr: ...
    def readlines(self) -> list[AnyStr]: ...
    def seek(self, offset: int, whence: int = ..., /) -> int: ...
    def tell(self) -> int: ...
    def truncate(size: int | None = ..., /) -> int: ...
    def write(self, s: AnyStr, /) -> int: ...
    def writelines(self, lines: Iterable[AnyStr], /) -> None: ...
    @property
    def closed(self) -> bool: ...
    def readable(self) -> bool: ...
    def writable(self) -> bool: ...
    def seekable(self) -> bool: ...
    def __iter__(self) -> Iterator[AnyStr]: ...
