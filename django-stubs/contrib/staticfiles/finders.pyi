from typing import Any, Dict, Iterable, Iterator, List, Optional, Sequence, Tuple, Type, overload

from django.core.checks.messages import CheckMessage
from django.core.files.storage import FileSystemStorage, Storage
from typing_extensions import Literal

searched_locations: Any

class BaseFinder:
    def check(self, **kwargs: Any) -> List[CheckMessage]: ...
    @overload
    def find(self, path: str, all: Literal[False] = ...) -> Optional[str]: ...
    @overload
    def find(self, path: str, all: Literal[True]) -> List[str]: ...
    def list(self, ignore_patterns: Optional[Iterable[str]]) -> Iterable[Any]: ...

class FileSystemFinder(BaseFinder):
    locations: List[Tuple[str, str]] = ...
    storages: Dict[str, Any] = ...
    def __init__(self, app_names: Sequence[str] = ..., *args: Any, **kwargs: Any) -> None: ...
    def find_location(self, root: str, path: str, prefix: Optional[str] = ...) -> Optional[str]: ...
    @overload
    def find(self, path: str, all: Literal[False] = ...) -> Optional[str]: ...
    @overload
    def find(self, path: str, all: Literal[True]) -> List[str]: ...
    def list(self, ignore_patterns: Optional[Iterable[str]]) -> Iterable[Any]: ...

class AppDirectoriesFinder(BaseFinder):
    storage_class: Type[FileSystemStorage] = ...
    source_dir: str = ...
    apps: List[str] = ...
    storages: Dict[str, FileSystemStorage] = ...
    def __init__(self, app_names: Optional[Iterable[str]] = ..., *args: Any, **kwargs: Any) -> None: ...
    def find_in_app(self, app: str, path: str) -> Optional[str]: ...
    @overload
    def find(self, path: str, all: Literal[False] = ...) -> Optional[str]: ...
    @overload
    def find(self, path: str, all: Literal[True]) -> List[str]: ...
    def list(self, ignore_patterns: Optional[Iterable[str]]) -> Iterable[Any]: ...

class BaseStorageFinder(BaseFinder):
    storage: Storage = ...
    def __init__(self, storage: Optional[Storage] = ..., *args: Any, **kwargs: Any) -> None: ...
    @overload
    def find(self, path: str, all: Literal[False] = ...) -> Optional[str]: ...
    @overload
    def find(self, path: str, all: Literal[True]) -> List[str]: ...
    def list(self, ignore_patterns: Optional[Iterable[str]]) -> Iterable[Any]: ...

class DefaultStorageFinder(BaseStorageFinder):
    storage: Storage = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

@overload
def find(path: str, all: Literal[False] = ...) -> Optional[str]: ...
@overload
def find(path: str, all: Literal[True]) -> List[str]: ...
def get_finders() -> Iterator[BaseFinder]: ...
@overload
def get_finder(
    import_path: Literal["django.contrib.staticfiles.finders.FileSystemFinder"],
) -> FileSystemFinder: ...
@overload
def get_finder(
    import_path: Literal["django.contrib.staticfiles.finders.AppDirectoriesFinder"],
) -> AppDirectoriesFinder: ...
