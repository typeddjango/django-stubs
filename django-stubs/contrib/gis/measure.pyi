from typing import Any

from _typeshed import Self
from typing_extensions import TypeAlias

class MeasureBase:
    STANDARD_UNIT: Any
    ALIAS: Any
    UNITS: Any
    LALIAS: Any
    def __init__(self, default_unit: Any | None = ..., **kwargs: Any) -> None: ...
    standard: Any
    def __getattr__(self, name: Any) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __add__(self, other: Any) -> Any: ...
    def __iadd__(self: Self, other: Any) -> Self: ...
    def __sub__(self, other: Any) -> Any: ...
    def __isub__(self: Self, other: Any) -> Self: ...
    def __mul__(self, other: Any) -> Any: ...
    def __imul__(self: Self, other: Any) -> Self: ...
    def __rmul__(self, other: Any) -> Any: ...
    def __truediv__(self, other: Any) -> Any: ...
    def __itruediv__(self: Self, other: Any) -> Self: ...
    def __bool__(self) -> bool: ...
    def default_units(self, kwargs: Any) -> Any: ...
    @classmethod
    def unit_attname(cls, unit_str: Any) -> Any: ...

class Distance(MeasureBase):
    STANDARD_UNIT: str
    UNITS: Any
    ALIAS: Any
    LALIAS: Any
    def __mul__(self, other: Any) -> Any: ...

class Area(MeasureBase):
    STANDARD_UNIT: Any
    UNITS: Any
    ALIAS: Any
    LALIAS: Any
    def __truediv__(self, other: Any) -> Any: ...

D: TypeAlias = Distance

A: TypeAlias = Area
