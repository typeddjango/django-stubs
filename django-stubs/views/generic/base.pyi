import logging
from collections.abc import Callable, Mapping, Sequence
from typing import Any, Generic, TypeVar

from django.http.request import HttpRequest
from django.http.response import HttpResponse, HttpResponseBase
from django.template.response import TemplateResponse
from django.utils.functional import _Getter

logger: logging.Logger

class ContextMixin:
    extra_context: Mapping[str, Any] | None
    def get_context_data(self, **kwargs: Any) -> dict[str, Any]: ...

_ViewResponse = TypeVar("_ViewResponse", bound=HttpResponseBase, default=HttpResponseBase)

class View(Generic[_ViewResponse]):
    http_method_names: Sequence[str]
    request: HttpRequest
    args: Any
    kwargs: Any
    def __init__(self, **kwargs: Any) -> None: ...
    view_is_async: _Getter[bool] | bool
    @classmethod
    def as_view(cls: Any, **initkwargs: Any) -> Callable[..., _ViewResponse]: ...
    def setup(self, request: HttpRequest, *args: Any, **kwargs: Any) -> None: ...
    def dispatch(self, request: HttpRequest, *args: Any, **kwargs: Any) -> _ViewResponse: ...
    def http_method_not_allowed(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponse: ...
    def options(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponseBase: ...

_TemplateResponse = TypeVar("_TemplateResponse", bound=HttpResponse, default=TemplateResponse)

class TemplateResponseMixin(Generic[_TemplateResponse]):
    template_name: str | None
    template_engine: str | None
    response_class: type[_TemplateResponse]
    content_type: str | None
    request: HttpRequest
    def render_to_response(self, context: dict[str, Any], **response_kwargs: Any) -> _TemplateResponse: ...
    def get_template_names(self) -> list[str]: ...

class TemplateView(TemplateResponseMixin[_TemplateResponse], ContextMixin, View[_TemplateResponse]):
    def get(self, request: HttpRequest, *args: Any, **kwargs: Any) -> _TemplateResponse: ...

class RedirectView(View):
    permanent: bool
    url: str | None
    pattern_name: str | None
    query_string: bool
    def get_redirect_url(self, *args: Any, **kwargs: Any) -> str | None: ...
    def get(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponseBase: ...
    def head(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponseBase: ...
    def post(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponseBase: ...
    def options(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponseBase: ...
    def delete(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponseBase: ...
    def put(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponseBase: ...
    def patch(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponseBase: ...
