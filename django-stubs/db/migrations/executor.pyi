from typing import List, Sequence, Set, Tuple

from django.db.backends.base.base import BaseDatabaseWrapper
from django.db.migrations.migration import Migration
from typing_extensions import Protocol

from .loader import MigrationLoader
from .recorder import MigrationRecorder
from .state import ProjectState

class _ProgressCallbackT(Protocol):
    def __call__(self, __action: str, __migration: Migration | None = ..., __fake: bool | None = ...) -> None: ...

class MigrationExecutor:
    connection: BaseDatabaseWrapper = ...
    loader: MigrationLoader = ...
    recorder: MigrationRecorder = ...
    progress_callback: _ProgressCallbackT | None = ...
    def __init__(
        self,
        connection: BaseDatabaseWrapper | None,
        progress_callback: _ProgressCallbackT | None = ...,
    ) -> None: ...
    def migration_plan(
        self, targets: Sequence[Tuple[str, str | None]] | Set[Tuple[str, str]], clean_start: bool = ...
    ) -> List[Tuple[Migration, bool]]: ...
    def migrate(
        self,
        targets: Sequence[Tuple[str, str | None]] | None,
        plan: Sequence[Tuple[Migration, bool]] | None = ...,
        state: ProjectState | None = ...,
        fake: bool = ...,
        fake_initial: bool = ...,
    ) -> ProjectState: ...
    def apply_migration(
        self, state: ProjectState, migration: Migration, fake: bool = ..., fake_initial: bool = ...
    ) -> ProjectState: ...
    def record_migration(self, migration: Migration) -> None: ...
    def unapply_migration(self, state: ProjectState, migration: Migration, fake: bool = ...) -> ProjectState: ...
    def check_replacements(self) -> None: ...
    def detect_soft_applied(
        self, project_state: ProjectState | None, migration: Migration
    ) -> Tuple[bool, ProjectState]: ...
