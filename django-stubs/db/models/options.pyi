from typing import Any, Dict, Generic, Iterable, List, Sequence, Set, Tuple, Type, TypeVar, Union, overload

from django.apps.config import AppConfig
from django.apps.registry import Apps
from django.contrib.contenttypes.fields import GenericForeignKey
from django.db.backends.base.base import BaseDatabaseWrapper
from django.db.models.base import Model
from django.db.models.constraints import BaseConstraint, UniqueConstraint
from django.db.models.fields import AutoField, Field
from django.db.models.fields.related import ManyToManyField, OneToOneField
from django.db.models.fields.reverse_related import ForeignObjectRel
from django.db.models.manager import Manager
from django.db.models.query_utils import PathInfo
from django.utils.datastructures import ImmutableList, _ListOrTuple
from django.utils.functional import _StrOrPromise
from typing_extensions import Literal

PROXY_PARENTS: object
EMPTY_RELATION_TREE: Any
IMMUTABLE_WARNING: str
DEFAULT_NAMES: Tuple[str, ...]

_OptionTogetherT = Union[_ListOrTuple[Union[_ListOrTuple[str], str]], Set[Tuple[str, ...]]]

@overload
def normalize_together(option_together: _ListOrTuple[_ListOrTuple[str] | str]) -> Tuple[Tuple[str, ...], ...]: ...

# Any other value will be returned unchanged, but probably only set is semantically allowed
@overload
def normalize_together(option_together: Set[Tuple[str, ...]]) -> Set[Tuple[str, ...]]: ...

_T = TypeVar("_T")

def make_immutable_fields_list(name: str, data: Iterable[_T]) -> ImmutableList[_T]: ...

_M = TypeVar("_M", bound="Model")

class Options(Generic[_M]):
    constraints: List[BaseConstraint]
    FORWARD_PROPERTIES: Set[str] = ...
    REVERSE_PROPERTIES: Set[str] = ...
    default_apps: Any = ...
    local_fields: List[Field] = ...
    local_many_to_many: List[ManyToManyField] = ...
    private_fields: List[Any] = ...
    local_managers: List[Manager] = ...
    base_manager_name: str | None = ...
    default_manager_name: str | None = ...
    model_name: str | None = ...
    verbose_name: _StrOrPromise | None = ...
    verbose_name_plural: _StrOrPromise | None = ...
    db_table: str = ...
    ordering: Sequence[str] | None = ...
    indexes: List[Any] = ...
    unique_together: Sequence[Tuple[str]] = ...  # Are always normalized
    index_together: Sequence[Tuple[str]] = ...  # Are always normalized
    select_on_save: bool = ...
    default_permissions: Sequence[str] = ...
    permissions: List[Any] = ...
    object_name: str | None = ...
    app_label: str = ...
    get_latest_by: Sequence[str] | None = ...
    order_with_respect_to: str | None = ...
    db_tablespace: str = ...
    required_db_features: List[str] = ...
    required_db_vendor: Literal["sqlite", "postgresql", "mysql", "oracle"] | None = ...
    meta: type | None = ...
    pk: Field | None = ...
    auto_field: AutoField | None = ...
    abstract: bool = ...
    managed: bool = ...
    proxy: bool = ...
    proxy_for_model: Type[Model] | None = ...
    concrete_model: Type[Model] | None = ...
    swappable: str | None = ...
    parents: Dict[Type[Model], GenericForeignKey | Field] = ...
    auto_created: bool = ...
    related_fkey_lookups: List[Any] = ...
    apps: Apps = ...
    default_related_name: str | None = ...
    model: Type[Model] = ...
    original_attrs: Dict[str, Any] = ...
    def __init__(self, meta: type | None, app_label: str | None = ...) -> None: ...
    @property
    def label(self) -> str: ...
    @property
    def label_lower(self) -> str: ...
    @property
    def app_config(self) -> AppConfig: ...
    @property
    def installed(self) -> bool: ...
    def contribute_to_class(self, cls: Type[Model], name: str) -> None: ...
    def add_manager(self, manager: Manager) -> None: ...
    def add_field(self, field: GenericForeignKey | Field[Any, Any], private: bool = ...) -> None: ...
    # if GenericForeignKey is passed as argument, it has primary_key = True set before
    def setup_pk(self, field: GenericForeignKey | Field[Any, Any]) -> None: ...
    def setup_proxy(self, target: Type[Model]) -> None: ...
    def can_migrate(self, connection: BaseDatabaseWrapper | str) -> bool: ...
    @property
    def verbose_name_raw(self) -> str: ...
    @property
    def swapped(self) -> str | None: ...
    @property
    def fields_map(self) -> Dict[str, Field[Any, Any] | ForeignObjectRel]: ...
    @property
    def managers(self) -> ImmutableList[Manager]: ...
    @property
    def managers_map(self) -> Dict[str, Manager]: ...
    @property
    def base_manager(self) -> Manager: ...
    @property
    def default_manager(self) -> Manager | None: ...
    @property
    def fields(self) -> ImmutableList[Field[Any, Any]]: ...
    def get_field(self, field_name: str) -> Field | ForeignObjectRel | GenericForeignKey: ...
    def get_base_chain(self, model: Type[Model]) -> List[Type[Model]]: ...
    def get_parent_list(self) -> List[Type[Model]]: ...
    def get_ancestor_link(self, ancestor: Type[Model]) -> OneToOneField | None: ...
    def get_path_to_parent(self, parent: Type[Model]) -> List[PathInfo]: ...
    def get_path_from_parent(self, parent: Type[Model]) -> List[PathInfo]: ...
    def get_fields(
        self, include_parents: bool = ..., include_hidden: bool = ...
    ) -> List[Field[Any, Any] | ForeignObjectRel | GenericForeignKey]: ...
    @property
    def total_unique_constraints(self) -> List[UniqueConstraint]: ...
    @property
    def db_returning_fields(self) -> List[Field[Any, Any]]: ...
