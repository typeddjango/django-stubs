from typing import Any, Dict, Iterator, NoReturn, Optional

from django.http import HttpRequest as _HttpRequest
from django.template.base import Origin as _Origin
from django.template.base import Template as _BaseTemplate
from django.template.engine import Engine
from django.template.exceptions import TemplateDoesNotExist

from .base import BaseEngine

class DjangoTemplates(BaseEngine):
    engine: Engine = ...
    def __init__(self, params: Dict[str, Any]) -> None: ...
    def get_templatetag_libraries(self, custom_libraries: Dict[str, str]) -> Dict[str, str]: ...
    def from_string(self, template_code: str) -> Template: ...
    def get_template(self, template_name: str) -> Template: ...

class Template:
    template: _BaseTemplate
    backend: BaseEngine

    def __init__(self, template: _BaseTemplate, backend: BaseEngine) -> None: ...
    @property
    def origin(self) -> _Origin: ...
    def render(self, context: Optional[Dict[str, Any]] = None, request: Optional[_HttpRequest] = None) -> str: ...

def copy_exception(exc: TemplateDoesNotExist, backend: Optional[DjangoTemplates] = ...) -> TemplateDoesNotExist: ...
def reraise(exc: TemplateDoesNotExist, backend: DjangoTemplates) -> NoReturn: ...
def get_installed_libraries() -> Dict[str, str]: ...
def get_package_libraries(pkg: Any) -> Iterator[str]: ...
